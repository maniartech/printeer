{
  "version": 3,
  "sources": ["../src/printeer.ts", "../src/utils.ts", "../src/usage.ts", "../src/core/doctor.ts", "../src/cli.ts"],
  "sourcesContent": ["import puppeteer from 'puppeteer';\r\nimport { normalize } from 'path';\r\nimport { getDefaultBrowserOptions } from './utils';\r\n\r\n\r\n// networkidle0 - consider navigation to be finished when there are no more than 0 network connections for at least 500 ms\r\n// networkidle2 - consider navigation to be finished when there are no more than 2 network connections for at least 500 ms.\r\n\r\n\r\n/**\r\n * Generate the report.\r\n * @param {string} reportName The name of the report.\r\n * @returns The promise of the report file.\r\n */\r\nexport default async (url:string, outputFile:string, outputType:string|null=null, browserOptions:any) => {\r\n\r\n  getPackageJson();\r\n\r\n  outputFile = normalize(outputFile);\r\n  if (!url.startsWith('http')) {\r\n    throw new Error('URL must start with http or https');\r\n  }\r\n\r\n  let launchOptions:any = getDefaultBrowserOptions()\r\n\r\n  if (browserOptions) {\r\n    launchOptions  = { ...launchOptions, ...browserOptions}\r\n  }\r\n\r\n  // PUPPETEER_EXECUTABLE_PATH\r\n  // Read the environment variable PUPPETEER_EXECUTABLE_PATH and use it as the path to the executable.\r\n  // If the environment variable is not set, the default executable path is used.\r\n  const exePath = process.env.PUPPETEER_EXECUTABLE_PATH;\r\n  if (exePath) {\r\n    launchOptions.executablePath = exePath;\r\n  }\r\n\r\n  let res:any = null\r\n  let page:any = null\r\n  let browser:unknown = null\r\n\r\n  try {\r\n    browser = await puppeteer.launch(launchOptions);\r\n    page    = await browser.newPage();\r\n    res     = await page.goto(url, {waitUntil: 'networkidle0'});\r\n  } catch (err) {\r\n    console.error(\"Browser Launch Error:\", err)\r\n    console.error(\"Browser Launch Options:\", launchOptions)\r\n    throw err;\r\n  }\r\n\r\n  if (!res) {\r\n    throw new Error(\"Could not load the page.\");\r\n  }\r\n\r\n  // Detect outputType\r\n  outputType = detectOutputType(outputFile, outputType);\r\n\r\n  if (res.status() !== 200) {\r\n    throw new Error(`Error: ${res.status()}: ${res.statusText()}`);\r\n  }\r\n\r\n  try {\r\n    if (outputType === 'png') {\r\n      await page.screenshot({ path: outputFile });\r\n    } else {\r\n      await page.pdf({ format: 'A4', path: outputFile });\r\n    }\r\n\r\n    // convert outputFile to absolute path\r\n    outputFile = normalize(outputFile);\r\n\r\n    return outputFile;\r\n  } finally {\r\n    await browser.close();\r\n  }\r\n}\r\n\r\nfunction getPackageJson() {\r\n  // Print process exec path\r\n  console.log(\"Process exec path\", process.execPath)\r\n\r\n}\r\n\r\n\r\nfunction detectOutputType(fname:string, outputType:string|null) {\r\n  const validOutputTypes:string[] = ['pdf', 'png']\r\n\r\n  if (!outputType) {\r\n    const ext = fname.split('.').pop()\r\n    if (!ext) { return 'pdf' }\r\n    if (validOutputTypes.includes(ext)) { return ext }\r\n    return 'pdf'\r\n  }\r\n\r\n  if (!validOutputTypes.includes(outputType)) { return 'pdf' }\r\n  return outputType\r\n}", "import * as os from 'os';\r\n\r\n// Checks if the current user is root.\r\nexport const isCurrentUserRoot = function():Boolean {\r\n  if (process && process.getuid) {\r\n    return process.getuid() === 0; // UID 0 is always root\r\n  }\r\n\r\n  if (os.userInfo().username == 'root') {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\n/**\r\n * Get the default browser options returns an object with the default options for the browser.\r\n */\r\nexport const getDefaultBrowserOptions = function():any {\r\n  const launchOptions:any = {\r\n    headless: true,\r\n    args: ['--no-sandbox', '--disable-setuid-sandbox'] // <- Handle this better, only for root users!\r\n  }\r\n\r\n  // PUPPETEER_EXECUTABLE_PATH\r\n  // Read the environment variable PUPPETEER_EXECUTABLE_PATH and use it as the path to the executable.\r\n  // If the environment variable is not set, the default executable path is used.\r\n  const exePath = process.env.PUPPETEER_EXECUTABLE_PATH;\r\n  if (exePath) {\r\n    launchOptions.executablePath = exePath;\r\n  }\r\n\r\n  return launchOptions;\r\n}\r\n", "/**\r\n * Prints the usage of the command line tool.\r\n */\r\nexport default () => {\r\n  console.log(`\r\nprinteer - Web-to-PDF/PNG conversion utility\r\n\r\nUSAGE:\r\n  printeer <url> <outputFile>        # Convert web page to PDF/PNG\r\n  printeer doctor [OPTIONS]          # Run system diagnostics\r\n  printeer help                      # Show this help message\r\n  printeer version                   # Show version information\r\n\r\nCOMMANDS:\r\n  doctor                             # System diagnostics and health checks\r\n    --verbose, -v                    # Show detailed diagnostic information\r\n    --json                           # Output results in JSON format\r\n    --help, -h                       # Show doctor command help\r\n\r\nEXAMPLES:\r\n  printeer https://example.com output.pdf     # Convert to PDF\r\n  printeer https://example.com output.png     # Convert to PNG\r\n  printeer doctor                             # Check system health\r\n  printeer doctor --verbose                   # Detailed diagnostics\r\n  printeer doctor --json                      # JSON output\r\n\r\nFor more information, visit: https://github.com/maniartech/printeer\r\n`);\r\n}\r\n", "// Doctor module implementation\r\n\r\nimport * as os from 'os';\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\nimport { execSync } from 'child_process';\r\nimport { DoctorModule, DiagnosticResult, SystemEnvironment, BrowserInfo, ResourceInfo, DependencyInfo } from '../types/diagnostics';\r\n\r\nexport class DefaultDoctorModule implements DoctorModule {\r\n  async runFullDiagnostics(): Promise<DiagnosticResult[]> {\r\n    const results: DiagnosticResult[] = [];\r\n    \r\n    // Run all diagnostic checks\r\n    const systemDeps = await this.checkSystemDependencies();\r\n    const browserValidation = await this.validateBrowserInstallation();\r\n    const envCompatibility = await this.checkEnvironmentCompatibility();\r\n    \r\n    results.push(...systemDeps);\r\n    results.push(...browserValidation);\r\n    results.push(...envCompatibility);\r\n    \r\n    return results;\r\n  }\r\n\r\n  async checkSystemDependencies(): Promise<DiagnosticResult[]> {\r\n    const results: DiagnosticResult[] = [];\r\n    \r\n    // Check system information\r\n    const systemInfo = this.getSystemEnvironment();\r\n    results.push({\r\n      status: 'pass',\r\n      component: 'system-info',\r\n      message: `System: ${systemInfo.os} ${systemInfo.arch}, Node.js ${systemInfo.nodeVersion}`,\r\n      details: systemInfo\r\n    });\r\n    \r\n    // Check browser availability\r\n    const browserInfo = await this.getBrowserInfo();\r\n    if (browserInfo.available) {\r\n      results.push({\r\n        status: 'pass',\r\n        component: 'browser-availability',\r\n        message: `Browser found at: ${browserInfo.path}`,\r\n        details: browserInfo\r\n      });\r\n    } else {\r\n      results.push({\r\n        status: 'fail',\r\n        component: 'browser-availability',\r\n        message: 'No suitable browser found',\r\n        remediation: 'Install Chrome/Chromium or set PUPPETEER_EXECUTABLE_PATH environment variable',\r\n        details: browserInfo\r\n      });\r\n    }\r\n    \r\n    // Check display server\r\n    const displayServerResult = this.checkDisplayServer();\r\n    results.push(displayServerResult);\r\n    \r\n    // Check font availability\r\n    const fontResult = this.checkFontAvailability();\r\n    results.push(fontResult);\r\n    \r\n    return results;\r\n  }\r\n\r\n  async validateBrowserInstallation(): Promise<DiagnosticResult[]> {\r\n    const results: DiagnosticResult[] = [];\r\n    \r\n    // Get browser info\r\n    const browserInfo = await this.getBrowserInfo();\r\n    \r\n    if (!browserInfo.available) {\r\n      results.push({\r\n        status: 'fail',\r\n        component: 'browser-installation',\r\n        message: 'No browser installation found',\r\n        remediation: 'Install Chrome/Chromium or set PUPPETEER_EXECUTABLE_PATH',\r\n        details: browserInfo\r\n      });\r\n      return results;\r\n    }\r\n\r\n    // Test browser launch\r\n    const launchResult = await this.testBrowserLaunch();\r\n    results.push(launchResult);\r\n\r\n    // Test browser version compatibility\r\n    const versionResult = this.checkBrowserVersionCompatibility(browserInfo);\r\n    results.push(versionResult);\r\n\r\n    // Test sandbox capabilities\r\n    const sandboxResult = await this.testSandboxCapabilities(browserInfo);\r\n    results.push(sandboxResult);\r\n\r\n    return results;\r\n  }\r\n\r\n  async testBrowserLaunch(): Promise<DiagnosticResult> {\r\n    const browserInfo = await this.getBrowserInfo();\r\n    \r\n    if (!browserInfo.available) {\r\n      return {\r\n        status: 'fail',\r\n        component: 'browser-launch',\r\n        message: 'Cannot test browser launch - no browser available',\r\n        remediation: 'Install a compatible browser first'\r\n      };\r\n    }\r\n\r\n    // Test basic browser launch\r\n    const basicLaunchResult = await this.testBasicBrowserLaunch(browserInfo);\r\n    \r\n    // Test browser launch with fallback configurations\r\n    const fallbackResults = await this.testFallbackConfigurations(browserInfo);\r\n    \r\n    // Combine basic launch result with fallback results\r\n    const allResults = [basicLaunchResult, ...fallbackResults];\r\n    const passedConfigs = allResults.filter(r => r.status === 'pass');\r\n    const failedConfigs = allResults.filter(r => r.status === 'fail');\r\n    \r\n    if (passedConfigs.length === 0) {\r\n      return {\r\n        status: 'fail',\r\n        component: 'browser-launch',\r\n        message: 'All browser launch configurations failed',\r\n        remediation: 'Check browser installation and system permissions',\r\n        details: { \r\n          basicLaunchResult,\r\n          fallbackResults,\r\n          allResults\r\n        }\r\n      };\r\n    }\r\n\r\n    return {\r\n      status: 'pass',\r\n      component: 'browser-launch',\r\n      message: `Browser launch successful (${passedConfigs.length}/${allResults.length} configurations work)`,\r\n      details: { \r\n        workingConfigurations: passedConfigs.length,\r\n        totalConfigurations: allResults.length,\r\n        basicLaunchResult,\r\n        fallbackResults,\r\n        allResults\r\n      }\r\n    };\r\n  }\r\n\r\n  async checkEnvironmentCompatibility(): Promise<DiagnosticResult[]> {\r\n    const results: DiagnosticResult[] = [];\r\n    \r\n    // Check platform compatibility\r\n    const platformResult = this.checkPlatformCompatibility();\r\n    results.push(platformResult);\r\n\r\n    // Check permissions\r\n    const permissionsResult = this.checkPermissions();\r\n    results.push(permissionsResult);\r\n\r\n    // Check resource availability\r\n    const resourceResult = this.checkResourceAvailability();\r\n    results.push(resourceResult);\r\n\r\n    // Check network connectivity (basic)\r\n    const networkResult = await this.checkNetworkConnectivity();\r\n    results.push(networkResult);\r\n\r\n    return results;\r\n  }\r\n\r\n  async generateReport(): Promise<string> {\r\n    const results = await this.runFullDiagnostics();\r\n    \r\n    const report = this.formatDiagnosticReport(results);\r\n    return report;\r\n  }\r\n\r\n  private formatDiagnosticReport(results: DiagnosticResult[]): string {\r\n    const timestamp = new Date().toISOString();\r\n    const passCount = results.filter(r => r.status === 'pass').length;\r\n    const warnCount = results.filter(r => r.status === 'warn').length;\r\n    const failCount = results.filter(r => r.status === 'fail').length;\r\n    \r\n    let report = `# Printeer System Diagnostic Report\\n\\n`;\r\n    report += `Generated: ${timestamp}\\n\\n`;\r\n    report += `## Summary\\n\\n`;\r\n    report += `- \u2705 Passed: ${passCount}\\n`;\r\n    report += `- \u26A0\uFE0F  Warnings: ${warnCount}\\n`;\r\n    report += `- \u274C Failed: ${failCount}\\n\\n`;\r\n    \r\n    if (failCount > 0) {\r\n      report += `## Critical Issues\\n\\n`;\r\n      const failedResults = results.filter(r => r.status === 'fail');\r\n      for (const result of failedResults) {\r\n        report += `### \u274C ${result.component}\\n\\n`;\r\n        report += `**Issue:** ${result.message}\\n\\n`;\r\n        if (result.remediation) {\r\n          report += `**Solution:** ${result.remediation}\\n\\n`;\r\n        }\r\n        if (result.details) {\r\n          report += `**Details:**\\n\\`\\`\\`json\\n${JSON.stringify(result.details, null, 2)}\\n\\`\\`\\`\\n\\n`;\r\n        }\r\n      }\r\n    }\r\n    \r\n    if (warnCount > 0) {\r\n      report += `## Warnings\\n\\n`;\r\n      const warnResults = results.filter(r => r.status === 'warn');\r\n      for (const result of warnResults) {\r\n        report += `### \u26A0\uFE0F ${result.component}\\n\\n`;\r\n        report += `**Issue:** ${result.message}\\n\\n`;\r\n        if (result.remediation) {\r\n          report += `**Recommendation:** ${result.remediation}\\n\\n`;\r\n        }\r\n        if (result.details) {\r\n          report += `**Details:**\\n\\`\\`\\`json\\n${JSON.stringify(result.details, null, 2)}\\n\\`\\`\\`\\n\\n`;\r\n        }\r\n      }\r\n    }\r\n    \r\n    report += `## All Checks\\n\\n`;\r\n    for (const result of results) {\r\n      const icon = result.status === 'pass' ? '\u2705' : result.status === 'warn' ? '\u26A0\uFE0F' : '\u274C';\r\n      report += `### ${icon} ${result.component}\\n\\n`;\r\n      report += `**Status:** ${result.status.toUpperCase()}\\n\\n`;\r\n      report += `**Message:** ${result.message}\\n\\n`;\r\n      if (result.remediation) {\r\n        report += `**Action:** ${result.remediation}\\n\\n`;\r\n      }\r\n    }\r\n    \r\n    return report;\r\n  }\r\n\r\n  formatDiagnosticReportJson(results: DiagnosticResult[]): string {\r\n    const timestamp = new Date().toISOString();\r\n    const summary = {\r\n      timestamp,\r\n      total: results.length,\r\n      passed: results.filter(r => r.status === 'pass').length,\r\n      warnings: results.filter(r => r.status === 'warn').length,\r\n      failed: results.filter(r => r.status === 'fail').length\r\n    };\r\n    \r\n    const report = {\r\n      summary,\r\n      results\r\n    };\r\n    \r\n    return JSON.stringify(report, null, 2);\r\n  }\r\n\r\n  // Helper methods for system dependency checking\r\n  private getSystemEnvironment(): SystemEnvironment {\r\n    return {\r\n      os: `${os.type()} ${os.release()}`,\r\n      arch: os.arch(),\r\n      nodeVersion: process.version,\r\n      isDocker: this.isRunningInDocker(),\r\n      isHeadless: this.isHeadlessEnvironment()\r\n    };\r\n  }\r\n\r\n  private async getBrowserInfo(): Promise<BrowserInfo> {\r\n    // Check for custom executable path first\r\n    const customPath = process.env.PUPPETEER_EXECUTABLE_PATH;\r\n    if (customPath && fs.existsSync(customPath)) {\r\n      const version = await this.getBrowserVersion(customPath);\r\n      return {\r\n        available: true,\r\n        path: customPath,\r\n        version: version || 'unknown',\r\n        launchable: true // Will be tested in browser validation\r\n      };\r\n    }\r\n\r\n    // Try to find system Chrome/Chromium\r\n    const browserPaths = this.getSystemBrowserPaths();\r\n    for (const browserPath of browserPaths) {\r\n      if (fs.existsSync(browserPath)) {\r\n        const version = await this.getBrowserVersion(browserPath);\r\n        return {\r\n          available: true,\r\n          path: browserPath,\r\n          version: version || 'unknown',\r\n          launchable: true // Will be tested in browser validation\r\n        };\r\n      }\r\n    }\r\n\r\n    // Check if Puppeteer's bundled Chromium is available\r\n    try {\r\n      const puppeteer = await import('puppeteer');\r\n      const browserPath = puppeteer.executablePath();\r\n      if (fs.existsSync(browserPath)) {\r\n        const version = await this.getBrowserVersion(browserPath);\r\n        return {\r\n          available: true,\r\n          path: browserPath,\r\n          version: version || 'unknown',\r\n          launchable: true\r\n        };\r\n      }\r\n    } catch (error) {\r\n      // Puppeteer not available or no bundled browser\r\n    }\r\n\r\n    return {\r\n      available: false,\r\n      path: '',\r\n      version: '',\r\n      launchable: false\r\n    };\r\n  }\r\n\r\n  private getSystemBrowserPaths(): string[] {\r\n    const platform = os.platform();\r\n    \r\n    switch (platform) {\r\n      case 'win32':\r\n        return [\r\n          'C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe',\r\n          'C:\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe',\r\n          'C:\\\\Program Files\\\\Chromium\\\\Application\\\\chrome.exe',\r\n          'C:\\\\Program Files (x86)\\\\Chromium\\\\Application\\\\chrome.exe'\r\n        ];\r\n      case 'darwin':\r\n        return [\r\n          '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome',\r\n          '/Applications/Chromium.app/Contents/MacOS/Chromium'\r\n        ];\r\n      case 'linux':\r\n      default:\r\n        return [\r\n          '/usr/bin/google-chrome',\r\n          '/usr/bin/google-chrome-stable',\r\n          '/usr/bin/chromium',\r\n          '/usr/bin/chromium-browser',\r\n          '/snap/bin/chromium',\r\n          '/usr/bin/chrome'\r\n        ];\r\n    }\r\n  }\r\n\r\n  private async getBrowserVersion(browserPath: string): Promise<string | null> {\r\n    try {\r\n      const result = execSync(`\"${browserPath}\" --version`, { \r\n        encoding: 'utf8', \r\n        timeout: 5000,\r\n        stdio: ['ignore', 'pipe', 'ignore']\r\n      });\r\n      return result.trim();\r\n    } catch (error) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private checkDisplayServer(): DiagnosticResult {\r\n    const platform = os.platform();\r\n    \r\n    if (platform === 'win32' || platform === 'darwin') {\r\n      return {\r\n        status: 'pass',\r\n        component: 'display-server',\r\n        message: 'Display server available (native GUI)',\r\n        details: { platform, hasDisplay: true }\r\n      };\r\n    }\r\n\r\n    // Linux - check for display server\r\n    const display = process.env.DISPLAY;\r\n    const waylandDisplay = process.env.WAYLAND_DISPLAY;\r\n    \r\n    if (display || waylandDisplay) {\r\n      return {\r\n        status: 'pass',\r\n        component: 'display-server',\r\n        message: `Display server available (${display ? 'X11' : 'Wayland'})`,\r\n        details: { platform, display, waylandDisplay, hasDisplay: true }\r\n      };\r\n    }\r\n\r\n    // Check if Xvfb is available for headless operation\r\n    try {\r\n      execSync('which Xvfb', { stdio: 'ignore' });\r\n      return {\r\n        status: 'warn',\r\n        component: 'display-server',\r\n        message: 'No display server detected, but Xvfb is available',\r\n        remediation: 'Consider running with Xvfb for headless operation',\r\n        details: { platform, hasXvfb: true, hasDisplay: false }\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        status: 'fail',\r\n        component: 'display-server',\r\n        message: 'No display server or Xvfb found',\r\n        remediation: 'Install Xvfb for headless operation: apt-get install xvfb',\r\n        details: { platform, hasXvfb: false, hasDisplay: false }\r\n      };\r\n    }\r\n  }\r\n\r\n  private checkFontAvailability(): DiagnosticResult {\r\n    const platform = os.platform();\r\n    const fonts: string[] = [];\r\n    let fontDirs: string[] = [];\r\n\r\n    switch (platform) {\r\n      case 'win32':\r\n        fontDirs = ['C:\\\\Windows\\\\Fonts'];\r\n        break;\r\n      case 'darwin':\r\n        fontDirs = ['/System/Library/Fonts', '/Library/Fonts'];\r\n        break;\r\n      case 'linux':\r\n      default:\r\n        fontDirs = ['/usr/share/fonts', '/usr/local/share/fonts', '/home/*/.fonts'];\r\n        break;\r\n    }\r\n\r\n    let totalFonts = 0;\r\n    for (const fontDir of fontDirs) {\r\n      try {\r\n        if (fs.existsSync(fontDir)) {\r\n          const fontFiles = this.getFontFiles(fontDir);\r\n          totalFonts += fontFiles.length;\r\n          fonts.push(...fontFiles.slice(0, 5)); // Sample first 5 fonts\r\n        }\r\n      } catch (error) {\r\n        // Ignore errors accessing font directories\r\n      }\r\n    }\r\n\r\n    if (totalFonts > 0) {\r\n      return {\r\n        status: 'pass',\r\n        component: 'font-availability',\r\n        message: `Found ${totalFonts} font files`,\r\n        details: { totalFonts, sampleFonts: fonts, platform }\r\n      };\r\n    } else {\r\n      return {\r\n        status: 'warn',\r\n        component: 'font-availability',\r\n        message: 'No fonts found in standard directories',\r\n        remediation: 'Install system fonts for better rendering quality',\r\n        details: { totalFonts: 0, checkedDirs: fontDirs, platform }\r\n      };\r\n    }\r\n  }\r\n\r\n  private getFontFiles(dir: string): string[] {\r\n    try {\r\n      const files = fs.readdirSync(dir);\r\n      return files.filter(file => \r\n        file.toLowerCase().endsWith('.ttf') || \r\n        file.toLowerCase().endsWith('.otf') ||\r\n        file.toLowerCase().endsWith('.woff') ||\r\n        file.toLowerCase().endsWith('.woff2')\r\n      );\r\n    } catch (error) {\r\n      return [];\r\n    }\r\n  }\r\n\r\n  private isRunningInDocker(): boolean {\r\n    try {\r\n      // Check for .dockerenv file\r\n      if (fs.existsSync('/.dockerenv')) {\r\n        return true;\r\n      }\r\n      \r\n      // Check cgroup for docker\r\n      const cgroup = fs.readFileSync('/proc/1/cgroup', 'utf8');\r\n      return cgroup.includes('docker') || cgroup.includes('containerd');\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private isHeadlessEnvironment(): boolean {\r\n    const platform = os.platform();\r\n    \r\n    if (platform === 'win32' || platform === 'darwin') {\r\n      return false; // Assume GUI available on Windows/macOS\r\n    }\r\n    \r\n    // Linux - check for display\r\n    return !process.env.DISPLAY && !process.env.WAYLAND_DISPLAY;\r\n  }\r\n\r\n  // Helper methods for browser validation and testing\r\n  private async testBasicBrowserLaunch(browserInfo: BrowserInfo): Promise<DiagnosticResult> {\r\n    try {\r\n      const puppeteer = await import('puppeteer');\r\n      \r\n      const browser = await puppeteer.launch({\r\n        executablePath: browserInfo.path,\r\n        headless: true,\r\n        args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage']\r\n      });\r\n\r\n      // Test basic page creation\r\n      const page = await browser.newPage();\r\n      await page.goto('data:text/html,<h1>Test</h1>', { waitUntil: 'load' });\r\n      const title = await page.title();\r\n      \r\n      await browser.close();\r\n\r\n      return {\r\n        status: 'pass',\r\n        component: 'browser-basic-launch',\r\n        message: 'Basic browser launch successful',\r\n        details: { browserPath: browserInfo.path, testTitle: title }\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        status: 'fail',\r\n        component: 'browser-basic-launch',\r\n        message: `Basic browser launch failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\r\n        remediation: 'Check browser installation and system permissions',\r\n        details: { browserPath: browserInfo.path, error: error instanceof Error ? error.message : 'Unknown error' }\r\n      };\r\n    }\r\n  }\r\n\r\n  private async testFallbackConfigurations(browserInfo: BrowserInfo): Promise<DiagnosticResult[]> {\r\n    const results: DiagnosticResult[] = [];\r\n    \r\n    // Test different browser configurations\r\n    const configurations = [\r\n      {\r\n        name: 'standard',\r\n        args: ['--no-sandbox', '--disable-setuid-sandbox']\r\n      },\r\n      {\r\n        name: 'minimal',\r\n        args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage', '--disable-gpu']\r\n      },\r\n      {\r\n        name: 'container-optimized',\r\n        args: [\r\n          '--no-sandbox',\r\n          '--disable-setuid-sandbox',\r\n          '--disable-dev-shm-usage',\r\n          '--disable-gpu',\r\n          '--disable-web-security',\r\n          '--disable-features=VizDisplayCompositor'\r\n        ]\r\n      }\r\n    ];\r\n\r\n    for (const config of configurations) {\r\n      const result = await this.testBrowserConfiguration(browserInfo, config);\r\n      results.push(result);\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  private async testBrowserConfiguration(\r\n    browserInfo: BrowserInfo, \r\n    config: { name: string; args: string[] }\r\n  ): Promise<DiagnosticResult> {\r\n    try {\r\n      const puppeteer = await import('puppeteer');\r\n      \r\n      const browser = await puppeteer.launch({\r\n        executablePath: browserInfo.path,\r\n        headless: true,\r\n        args: config.args,\r\n        timeout: 10000\r\n      });\r\n\r\n      const page = await browser.newPage();\r\n      await page.goto('data:text/html,<h1>Config Test</h1>', { \r\n        waitUntil: 'load',\r\n        timeout: 5000\r\n      });\r\n      \r\n      await browser.close();\r\n\r\n      return {\r\n        status: 'pass',\r\n        component: `browser-config-${config.name}`,\r\n        message: `Browser configuration '${config.name}' works`,\r\n        details: { configuration: config.name, args: config.args }\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        status: 'fail',\r\n        component: `browser-config-${config.name}`,\r\n        message: `Browser configuration '${config.name}' failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\r\n        details: { \r\n          configuration: config.name, \r\n          args: config.args,\r\n          error: error instanceof Error ? error.message : 'Unknown error'\r\n        }\r\n      };\r\n    }\r\n  }\r\n\r\n  private checkBrowserVersionCompatibility(browserInfo: BrowserInfo): DiagnosticResult {\r\n    if (!browserInfo.version) {\r\n      return {\r\n        status: 'warn',\r\n        component: 'browser-version',\r\n        message: 'Could not determine browser version',\r\n        remediation: 'Ensure browser is properly installed and accessible'\r\n      };\r\n    }\r\n\r\n    // Extract version number from version string\r\n    const versionMatch = browserInfo.version.match(/(\\d+)\\.(\\d+)\\.(\\d+)/);\r\n    if (!versionMatch) {\r\n      return {\r\n        status: 'warn',\r\n        component: 'browser-version',\r\n        message: `Unknown version format: ${browserInfo.version}`,\r\n        details: { version: browserInfo.version }\r\n      };\r\n    }\r\n\r\n    const majorVersion = parseInt(versionMatch[1], 10);\r\n    \r\n    // Chrome/Chromium version compatibility check\r\n    // Puppeteer generally supports Chrome 70+ (released in 2018)\r\n    if (majorVersion >= 70) {\r\n      return {\r\n        status: 'pass',\r\n        component: 'browser-version',\r\n        message: `Browser version ${browserInfo.version} is compatible`,\r\n        details: { version: browserInfo.version, majorVersion }\r\n      };\r\n    } else {\r\n      return {\r\n        status: 'warn',\r\n        component: 'browser-version',\r\n        message: `Browser version ${browserInfo.version} may be too old`,\r\n        remediation: 'Consider updating to Chrome/Chromium 70 or newer',\r\n        details: { version: browserInfo.version, majorVersion, minimumSupported: 70 }\r\n      };\r\n    }\r\n  }\r\n\r\n  private async testSandboxCapabilities(browserInfo: BrowserInfo): Promise<DiagnosticResult> {\r\n    const platform = os.platform();\r\n    const isRoot = this.isCurrentUserRoot();\r\n    \r\n    // Test sandbox capabilities based on environment\r\n    if (platform === 'linux' && isRoot) {\r\n      return {\r\n        status: 'warn',\r\n        component: 'browser-sandbox',\r\n        message: 'Running as root - sandbox disabled for security',\r\n        remediation: 'Run as non-root user for better security, or use --no-sandbox flag',\r\n        details: { platform, isRoot, sandboxDisabled: true }\r\n      };\r\n    }\r\n\r\n    // Test if browser can run with sandbox enabled\r\n    try {\r\n      const puppeteer = await import('puppeteer');\r\n      \r\n      const browser = await puppeteer.launch({\r\n        executablePath: browserInfo.path,\r\n        headless: true,\r\n        args: [], // No --no-sandbox flag\r\n        timeout: 10000\r\n      });\r\n\r\n      await browser.close();\r\n\r\n      return {\r\n        status: 'pass',\r\n        component: 'browser-sandbox',\r\n        message: 'Browser sandbox is working correctly',\r\n        details: { platform, isRoot, sandboxEnabled: true }\r\n      };\r\n    } catch (error) {\r\n      // Try with sandbox disabled\r\n      try {\r\n        const puppeteer = await import('puppeteer');\r\n        \r\n        const browser = await puppeteer.launch({\r\n          executablePath: browserInfo.path,\r\n          headless: true,\r\n          args: ['--no-sandbox', '--disable-setuid-sandbox'],\r\n          timeout: 10000\r\n        });\r\n\r\n        await browser.close();\r\n\r\n        return {\r\n          status: 'warn',\r\n          component: 'browser-sandbox',\r\n          message: 'Browser requires sandbox to be disabled',\r\n          remediation: 'This is normal in Docker containers or when running as root',\r\n          details: { \r\n            platform, \r\n            isRoot, \r\n            sandboxEnabled: false,\r\n            sandboxError: error instanceof Error ? error.message : 'Unknown error'\r\n          }\r\n        };\r\n      } catch (fallbackError) {\r\n        return {\r\n          status: 'fail',\r\n          component: 'browser-sandbox',\r\n          message: 'Browser cannot launch with or without sandbox',\r\n          remediation: 'Check browser installation and system configuration',\r\n          details: { \r\n            platform, \r\n            isRoot,\r\n            sandboxError: error instanceof Error ? error.message : 'Unknown error',\r\n            fallbackError: fallbackError instanceof Error ? fallbackError.message : 'Unknown error'\r\n          }\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n  private checkPlatformCompatibility(): DiagnosticResult {\r\n    const platform = os.platform();\r\n    const arch = os.arch();\r\n    \r\n    const supportedPlatforms = ['linux', 'win32', 'darwin'];\r\n    const supportedArchs = ['x64', 'arm64'];\r\n    \r\n    if (!supportedPlatforms.includes(platform)) {\r\n      return {\r\n        status: 'fail',\r\n        component: 'platform-compatibility',\r\n        message: `Unsupported platform: ${platform}`,\r\n        remediation: 'Printeer supports Linux, Windows, and macOS',\r\n        details: { platform, arch, supportedPlatforms }\r\n      };\r\n    }\r\n    \r\n    if (!supportedArchs.includes(arch)) {\r\n      return {\r\n        status: 'warn',\r\n        component: 'platform-compatibility',\r\n        message: `Architecture ${arch} may not be fully supported`,\r\n        remediation: 'x64 and arm64 architectures are recommended',\r\n        details: { platform, arch, supportedArchs }\r\n      };\r\n    }\r\n    \r\n    return {\r\n      status: 'pass',\r\n      component: 'platform-compatibility',\r\n      message: `Platform ${platform} ${arch} is supported`,\r\n      details: { platform, arch }\r\n    };\r\n  }\r\n\r\n  private checkPermissions(): DiagnosticResult {\r\n    const permissions: string[] = [];\r\n    const issues: string[] = [];\r\n    \r\n    // Check file system permissions\r\n    try {\r\n      const tempDir = os.tmpdir();\r\n      const testFile = path.join(tempDir, 'printeer-test-' + Date.now());\r\n      fs.writeFileSync(testFile, 'test');\r\n      fs.unlinkSync(testFile);\r\n      permissions.push('filesystem-write');\r\n    } catch (error) {\r\n      issues.push('Cannot write to temporary directory');\r\n    }\r\n    \r\n    // Check if running as root (security concern)\r\n    const isRoot = this.isCurrentUserRoot();\r\n    if (isRoot) {\r\n      issues.push('Running as root user (security risk)');\r\n    } else {\r\n      permissions.push('non-root-user');\r\n    }\r\n    \r\n    // Check process permissions\r\n    try {\r\n      if (process.getuid && process.getgid) {\r\n        permissions.push('process-info-access');\r\n      }\r\n    } catch (error) {\r\n      // Not available on Windows\r\n    }\r\n    \r\n    if (issues.length > 0) {\r\n      return {\r\n        status: 'warn',\r\n        component: 'permissions',\r\n        message: `Permission issues detected: ${issues.join(', ')}`,\r\n        remediation: 'Run with appropriate user permissions',\r\n        details: { permissions, issues, isRoot }\r\n      };\r\n    }\r\n    \r\n    return {\r\n      status: 'pass',\r\n      component: 'permissions',\r\n      message: 'System permissions are adequate',\r\n      details: { permissions, isRoot }\r\n    };\r\n  }\r\n\r\n  private checkResourceAvailability(): DiagnosticResult {\r\n    const totalMemory = os.totalmem();\r\n    const freeMemory = os.freemem();\r\n    const cpuCores = os.cpus().length;\r\n    \r\n    const memoryGB = totalMemory / (1024 * 1024 * 1024);\r\n    const freeMemoryGB = freeMemory / (1024 * 1024 * 1024);\r\n    \r\n    const issues: string[] = [];\r\n    \r\n    // Check minimum memory requirements (1GB total, 512MB free)\r\n    if (memoryGB < 1) {\r\n      issues.push('Low total memory (< 1GB)');\r\n    }\r\n    \r\n    if (freeMemoryGB < 0.5) {\r\n      issues.push('Low available memory (< 512MB)');\r\n    }\r\n    \r\n    // Check CPU cores\r\n    if (cpuCores < 2) {\r\n      issues.push('Single CPU core may impact performance');\r\n    }\r\n    \r\n    const status = issues.length > 0 ? 'warn' : 'pass';\r\n    const message = issues.length > 0 \r\n      ? `Resource constraints detected: ${issues.join(', ')}`\r\n      : `System resources adequate: ${memoryGB.toFixed(1)}GB RAM, ${cpuCores} CPU cores`;\r\n    \r\n    return {\r\n      status,\r\n      component: 'resource-availability',\r\n      message,\r\n      remediation: issues.length > 0 ? 'Consider increasing available system resources' : undefined,\r\n      details: {\r\n        totalMemoryGB: parseFloat(memoryGB.toFixed(2)),\r\n        freeMemoryGB: parseFloat(freeMemoryGB.toFixed(2)),\r\n        cpuCores,\r\n        issues\r\n      }\r\n    };\r\n  }\r\n\r\n  private async checkNetworkConnectivity(): Promise<DiagnosticResult> {\r\n    // Basic network connectivity test\r\n    try {\r\n      // Test if we can resolve DNS\r\n      const dns = await import('dns');\r\n      await new Promise((resolve, reject) => {\r\n        dns.lookup('google.com', (err) => {\r\n          if (err) reject(err);\r\n          else resolve(true);\r\n        });\r\n      });\r\n      \r\n      return {\r\n        status: 'pass',\r\n        component: 'network-connectivity',\r\n        message: 'Basic network connectivity available',\r\n        details: { dnsResolution: true }\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        status: 'warn',\r\n        component: 'network-connectivity',\r\n        message: 'Network connectivity issues detected',\r\n        remediation: 'Check network configuration for web content loading',\r\n        details: { \r\n          dnsResolution: false,\r\n          error: error instanceof Error ? error.message : 'Unknown error'\r\n        }\r\n      };\r\n    }\r\n  }\r\n\r\n  private isCurrentUserRoot(): boolean {\r\n    try {\r\n      if (process && process.getuid) {\r\n        return process.getuid() === 0; // UID 0 is always root\r\n      }\r\n\r\n      if (os.userInfo().username === 'root') {\r\n        return true;\r\n      }\r\n\r\n      return false;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  }\r\n}", "#!/usr/bin/env node\r\n\r\nimport printeer from \"./printeer\";\r\nimport printUsage from \"./usage\";\r\nimport { DefaultDoctorModule } from \"./core/doctor\";\r\n\r\n/**\r\n * Main entry point of the print-web command!\r\n */\r\n(async function main() {\r\n  const args = process.argv.slice(2);\r\n  \r\n  // Handle doctor command\r\n  if (args[0] === 'doctor') {\r\n    await handleDoctorCommand(args.slice(1));\r\n    return;\r\n  }\r\n  \r\n  // Handle help command\r\n  if (args[0] === 'help' || args[0] === '--help' || args[0] === '-h') {\r\n    printUsage();\r\n    return;\r\n  }\r\n  \r\n  // Handle version command\r\n  if (args[0] === 'version' || args[0] === '--version' || args[0] === '-v') {\r\n    // Read version from package.json at runtime\r\n    try {\r\n      const fs = await import('fs');\r\n      const path = await import('path');\r\n      const packagePath = path.join(process.cwd(), 'package.json');\r\n      const packageContent = fs.readFileSync(packagePath, 'utf8');\r\n      const packageJson = JSON.parse(packageContent);\r\n      console.log(`printeer v${packageJson.version}`);\r\n    } catch (error) {\r\n      console.log('printeer (version unknown)');\r\n    }\r\n    return;\r\n  }\r\n\r\n  // Legacy mode: direct URL and output file\r\n  const url = args[0];\r\n  const outputFile = args[1];\r\n\r\n  // If url or outputFile is not provided, print usage and exit.\r\n  if (!url || !outputFile) {\r\n    printUsage();\r\n    process.exit(1);\r\n  }\r\n\r\n  // Wait for the printeer to finish.\r\n  try {\r\n    await printeer(url, outputFile, null, null);\r\n  } catch (e) {\r\n    console.error(\"Error:\", e);\r\n    process.exit(1);\r\n  }\r\n})();\r\n\r\nasync function handleDoctorCommand(args: string[]) {\r\n  const json = args.includes('--json');\r\n  const help = args.includes('--help') || args.includes('-h');\r\n  \r\n  if (help) {\r\n    printDoctorUsage();\r\n    return;\r\n  }\r\n  \r\n  try {\r\n    console.log('\uD83D\uDD0D Running system diagnostics...\\n');\r\n    \r\n    const doctorModule = new DefaultDoctorModule();\r\n    const results = await doctorModule.runFullDiagnostics();\r\n    \r\n    if (json) {\r\n      const jsonReport = doctorModule.formatDiagnosticReportJson(results);\r\n      console.log(jsonReport);\r\n    } else {\r\n      const report = await doctorModule.generateReport();\r\n      console.log(report);\r\n    }\r\n    \r\n    // Exit with appropriate code\r\n    const hasFailures = results.some(r => r.status === 'fail');\r\n    const hasWarnings = results.some(r => r.status === 'warn');\r\n    \r\n    if (hasFailures) {\r\n      console.error('\\n\u274C Critical issues found. Please address the failures above.');\r\n      process.exit(1);\r\n    } else if (hasWarnings) {\r\n      console.warn('\\n\u26A0\uFE0F  Some warnings detected. Consider addressing them for optimal performance.');\r\n      process.exit(0);\r\n    } else {\r\n      console.log('\\n\u2705 All checks passed! Your system is ready for printeer.');\r\n      process.exit(0);\r\n    }\r\n    \r\n  } catch (error) {\r\n    console.error('\u274C Error running diagnostics:', error instanceof Error ? error.message : 'Unknown error');\r\n    process.exit(1);\r\n  }\r\n}\r\n\r\nfunction printDoctorUsage() {\r\n  console.log(`\r\nprinteer doctor - System diagnostics and health checks\r\n\r\nUSAGE:\r\n  printeer doctor [OPTIONS]\r\n\r\nOPTIONS:\r\n  --verbose, -v    Show detailed diagnostic information\r\n  --json           Output results in JSON format\r\n  --help, -h       Show this help message\r\n\r\nDESCRIPTION:\r\n  The doctor command runs comprehensive system diagnostics to ensure\r\n  your environment is properly configured for printeer. It checks:\r\n  \r\n  \u2022 System dependencies (Node.js, OS compatibility)\r\n  \u2022 Browser installation and availability\r\n  \u2022 Display server configuration (for headless environments)\r\n  \u2022 Font availability\r\n  \u2022 System resources (memory, CPU)\r\n  \u2022 Network connectivity\r\n  \u2022 File system permissions\r\n  \u2022 Environment-specific configurations\r\n\r\nEXAMPLES:\r\n  printeer doctor                    # Run basic diagnostics\r\n  printeer doctor --verbose          # Show detailed information\r\n  printeer doctor --json             # Output in JSON format\r\n`);\r\n}\r\n"],
  "mappings": ";;;AAAA,OAAO,eAAe;AACtB,SAAS,iBAAiB;;;ACD1B,YAAY,QAAQ;AAkBb,IAAM,2BAA2B,WAAe;AACrD,QAAM,gBAAoB;AAAA,IACxB,UAAU;AAAA,IACV,MAAM,CAAC,gBAAgB,0BAA0B;AAAA,EACnD;AAKA,QAAM,UAAU,QAAQ,IAAI;AAC5B,MAAI,SAAS;AACX,kBAAc,iBAAiB;AAAA,EACjC;AAEA,SAAO;AACT;;;ADnBA,IAAO,mBAAQ,OAAO,KAAY,YAAmB,aAAuB,MAAM,mBAAuB;AAEvG,iBAAe;AAEf,eAAa,UAAU,UAAU;AACjC,MAAI,CAAC,IAAI,WAAW,MAAM,GAAG;AAC3B,UAAM,IAAI,MAAM,mCAAmC;AAAA,EACrD;AAEA,MAAI,gBAAoB,yBAAyB;AAEjD,MAAI,gBAAgB;AAClB,oBAAiB,EAAE,GAAG,eAAe,GAAG,eAAc;AAAA,EACxD;AAKA,QAAM,UAAU,QAAQ,IAAI;AAC5B,MAAI,SAAS;AACX,kBAAc,iBAAiB;AAAA,EACjC;AAEA,MAAI,MAAU;AACd,MAAI,OAAW;AACf,MAAI,UAAkB;AAEtB,MAAI;AACF,cAAU,MAAM,UAAU,OAAO,aAAa;AAC9C,WAAU,MAAM,QAAQ,QAAQ;AAChC,UAAU,MAAM,KAAK,KAAK,KAAK,EAAC,WAAW,eAAc,CAAC;AAAA,EAC5D,SAAS,KAAP;AACA,YAAQ,MAAM,yBAAyB,GAAG;AAC1C,YAAQ,MAAM,2BAA2B,aAAa;AACtD,UAAM;AAAA,EACR;AAEA,MAAI,CAAC,KAAK;AACR,UAAM,IAAI,MAAM,0BAA0B;AAAA,EAC5C;AAGA,eAAa,iBAAiB,YAAY,UAAU;AAEpD,MAAI,IAAI,OAAO,MAAM,KAAK;AACxB,UAAM,IAAI,MAAM,UAAU,IAAI,OAAO,MAAM,IAAI,WAAW,GAAG;AAAA,EAC/D;AAEA,MAAI;AACF,QAAI,eAAe,OAAO;AACxB,YAAM,KAAK,WAAW,EAAE,MAAM,WAAW,CAAC;AAAA,IAC5C,OAAO;AACL,YAAM,KAAK,IAAI,EAAE,QAAQ,MAAM,MAAM,WAAW,CAAC;AAAA,IACnD;AAGA,iBAAa,UAAU,UAAU;AAEjC,WAAO;AAAA,EACT,UAAE;AACA,UAAM,QAAQ,MAAM;AAAA,EACtB;AACF;AAEA,SAAS,iBAAiB;AAExB,UAAQ,IAAI,qBAAqB,QAAQ,QAAQ;AAEnD;AAGA,SAAS,iBAAiB,OAAc,YAAwB;AAC9D,QAAM,mBAA4B,CAAC,OAAO,KAAK;AAE/C,MAAI,CAAC,YAAY;AACf,UAAM,MAAM,MAAM,MAAM,GAAG,EAAE,IAAI;AACjC,QAAI,CAAC,KAAK;AAAE,aAAO;AAAA,IAAM;AACzB,QAAI,iBAAiB,SAAS,GAAG,GAAG;AAAE,aAAO;AAAA,IAAI;AACjD,WAAO;AAAA,EACT;AAEA,MAAI,CAAC,iBAAiB,SAAS,UAAU,GAAG;AAAE,WAAO;AAAA,EAAM;AAC3D,SAAO;AACT;;;AE9FA,IAAO,gBAAQ,MAAM;AACnB,UAAQ,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAuBb;AACD;;;AC1BA,YAAYA,SAAQ;AACpB,YAAY,QAAQ;AACpB,YAAY,UAAU;AACtB,SAAS,gBAAgB;AAGlB,IAAM,sBAAN,MAAkD;AAAA,EACvD,MAAM,qBAAkD;AACtD,UAAM,UAA8B,CAAC;AAGrC,UAAM,aAAa,MAAM,KAAK,wBAAwB;AACtD,UAAM,oBAAoB,MAAM,KAAK,4BAA4B;AACjE,UAAM,mBAAmB,MAAM,KAAK,8BAA8B;AAElE,YAAQ,KAAK,GAAG,UAAU;AAC1B,YAAQ,KAAK,GAAG,iBAAiB;AACjC,YAAQ,KAAK,GAAG,gBAAgB;AAEhC,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,0BAAuD;AAC3D,UAAM,UAA8B,CAAC;AAGrC,UAAM,aAAa,KAAK,qBAAqB;AAC7C,YAAQ,KAAK;AAAA,MACX,QAAQ;AAAA,MACR,WAAW;AAAA,MACX,SAAS,WAAW,WAAW,MAAM,WAAW,iBAAiB,WAAW;AAAA,MAC5E,SAAS;AAAA,IACX,CAAC;AAGD,UAAM,cAAc,MAAM,KAAK,eAAe;AAC9C,QAAI,YAAY,WAAW;AACzB,cAAQ,KAAK;AAAA,QACX,QAAQ;AAAA,QACR,WAAW;AAAA,QACX,SAAS,qBAAqB,YAAY;AAAA,QAC1C,SAAS;AAAA,MACX,CAAC;AAAA,IACH,OAAO;AACL,cAAQ,KAAK;AAAA,QACX,QAAQ;AAAA,QACR,WAAW;AAAA,QACX,SAAS;AAAA,QACT,aAAa;AAAA,QACb,SAAS;AAAA,MACX,CAAC;AAAA,IACH;AAGA,UAAM,sBAAsB,KAAK,mBAAmB;AACpD,YAAQ,KAAK,mBAAmB;AAGhC,UAAM,aAAa,KAAK,sBAAsB;AAC9C,YAAQ,KAAK,UAAU;AAEvB,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,8BAA2D;AAC/D,UAAM,UAA8B,CAAC;AAGrC,UAAM,cAAc,MAAM,KAAK,eAAe;AAE9C,QAAI,CAAC,YAAY,WAAW;AAC1B,cAAQ,KAAK;AAAA,QACX,QAAQ;AAAA,QACR,WAAW;AAAA,QACX,SAAS;AAAA,QACT,aAAa;AAAA,QACb,SAAS;AAAA,MACX,CAAC;AACD,aAAO;AAAA,IACT;AAGA,UAAM,eAAe,MAAM,KAAK,kBAAkB;AAClD,YAAQ,KAAK,YAAY;AAGzB,UAAM,gBAAgB,KAAK,iCAAiC,WAAW;AACvE,YAAQ,KAAK,aAAa;AAG1B,UAAM,gBAAgB,MAAM,KAAK,wBAAwB,WAAW;AACpE,YAAQ,KAAK,aAAa;AAE1B,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,oBAA+C;AACnD,UAAM,cAAc,MAAM,KAAK,eAAe;AAE9C,QAAI,CAAC,YAAY,WAAW;AAC1B,aAAO;AAAA,QACL,QAAQ;AAAA,QACR,WAAW;AAAA,QACX,SAAS;AAAA,QACT,aAAa;AAAA,MACf;AAAA,IACF;AAGA,UAAM,oBAAoB,MAAM,KAAK,uBAAuB,WAAW;AAGvE,UAAM,kBAAkB,MAAM,KAAK,2BAA2B,WAAW;AAGzE,UAAM,aAAa,CAAC,mBAAmB,GAAG,eAAe;AACzD,UAAM,gBAAgB,WAAW,OAAO,OAAK,EAAE,WAAW,MAAM;AAChE,UAAM,gBAAgB,WAAW,OAAO,OAAK,EAAE,WAAW,MAAM;AAEhE,QAAI,cAAc,WAAW,GAAG;AAC9B,aAAO;AAAA,QACL,QAAQ;AAAA,QACR,WAAW;AAAA,QACX,SAAS;AAAA,QACT,aAAa;AAAA,QACb,SAAS;AAAA,UACP;AAAA,UACA;AAAA,UACA;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAEA,WAAO;AAAA,MACL,QAAQ;AAAA,MACR,WAAW;AAAA,MACX,SAAS,8BAA8B,cAAc,UAAU,WAAW;AAAA,MAC1E,SAAS;AAAA,QACP,uBAAuB,cAAc;AAAA,QACrC,qBAAqB,WAAW;AAAA,QAChC;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAM,gCAA6D;AACjE,UAAM,UAA8B,CAAC;AAGrC,UAAM,iBAAiB,KAAK,2BAA2B;AACvD,YAAQ,KAAK,cAAc;AAG3B,UAAM,oBAAoB,KAAK,iBAAiB;AAChD,YAAQ,KAAK,iBAAiB;AAG9B,UAAM,iBAAiB,KAAK,0BAA0B;AACtD,YAAQ,KAAK,cAAc;AAG3B,UAAM,gBAAgB,MAAM,KAAK,yBAAyB;AAC1D,YAAQ,KAAK,aAAa;AAE1B,WAAO;AAAA,EACT;AAAA,EAEA,MAAM,iBAAkC;AACtC,UAAM,UAAU,MAAM,KAAK,mBAAmB;AAE9C,UAAM,SAAS,KAAK,uBAAuB,OAAO;AAClD,WAAO;AAAA,EACT;AAAA,EAEQ,uBAAuB,SAAqC;AAClE,UAAM,YAAY,IAAI,KAAK,EAAE,YAAY;AACzC,UAAM,YAAY,QAAQ,OAAO,OAAK,EAAE,WAAW,MAAM,EAAE;AAC3D,UAAM,YAAY,QAAQ,OAAO,OAAK,EAAE,WAAW,MAAM,EAAE;AAC3D,UAAM,YAAY,QAAQ,OAAO,OAAK,EAAE,WAAW,MAAM,EAAE;AAE3D,QAAI,SAAS;AAAA;AAAA;AACb,cAAU,cAAc;AAAA;AAAA;AACxB,cAAU;AAAA;AAAA;AACV,cAAU,oBAAe;AAAA;AACzB,cAAU,6BAAmB;AAAA;AAC7B,cAAU,oBAAe;AAAA;AAAA;AAEzB,QAAI,YAAY,GAAG;AACjB,gBAAU;AAAA;AAAA;AACV,YAAM,gBAAgB,QAAQ,OAAO,OAAK,EAAE,WAAW,MAAM;AAC7D,iBAAW,UAAU,eAAe;AAClC,kBAAU,cAAS,OAAO;AAAA;AAAA;AAC1B,kBAAU,cAAc,OAAO;AAAA;AAAA;AAC/B,YAAI,OAAO,aAAa;AACtB,oBAAU,iBAAiB,OAAO;AAAA;AAAA;AAAA,QACpC;AACA,YAAI,OAAO,SAAS;AAClB,oBAAU;AAAA;AAAA,EAA6B,KAAK,UAAU,OAAO,SAAS,MAAM,CAAC;AAAA;AAAA;AAAA;AAAA,QAC/E;AAAA,MACF;AAAA,IACF;AAEA,QAAI,YAAY,GAAG;AACjB,gBAAU;AAAA;AAAA;AACV,YAAM,cAAc,QAAQ,OAAO,OAAK,EAAE,WAAW,MAAM;AAC3D,iBAAW,UAAU,aAAa;AAChC,kBAAU,oBAAU,OAAO;AAAA;AAAA;AAC3B,kBAAU,cAAc,OAAO;AAAA;AAAA;AAC/B,YAAI,OAAO,aAAa;AACtB,oBAAU,uBAAuB,OAAO;AAAA;AAAA;AAAA,QAC1C;AACA,YAAI,OAAO,SAAS;AAClB,oBAAU;AAAA;AAAA,EAA6B,KAAK,UAAU,OAAO,SAAS,MAAM,CAAC;AAAA;AAAA;AAAA;AAAA,QAC/E;AAAA,MACF;AAAA,IACF;AAEA,cAAU;AAAA;AAAA;AACV,eAAW,UAAU,SAAS;AAC5B,YAAM,OAAO,OAAO,WAAW,SAAS,WAAM,OAAO,WAAW,SAAS,iBAAO;AAChF,gBAAU,OAAO,QAAQ,OAAO;AAAA;AAAA;AAChC,gBAAU,eAAe,OAAO,OAAO,YAAY;AAAA;AAAA;AACnD,gBAAU,gBAAgB,OAAO;AAAA;AAAA;AACjC,UAAI,OAAO,aAAa;AACtB,kBAAU,eAAe,OAAO;AAAA;AAAA;AAAA,MAClC;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,2BAA2B,SAAqC;AAC9D,UAAM,YAAY,IAAI,KAAK,EAAE,YAAY;AACzC,UAAM,UAAU;AAAA,MACd;AAAA,MACA,OAAO,QAAQ;AAAA,MACf,QAAQ,QAAQ,OAAO,OAAK,EAAE,WAAW,MAAM,EAAE;AAAA,MACjD,UAAU,QAAQ,OAAO,OAAK,EAAE,WAAW,MAAM,EAAE;AAAA,MACnD,QAAQ,QAAQ,OAAO,OAAK,EAAE,WAAW,MAAM,EAAE;AAAA,IACnD;AAEA,UAAM,SAAS;AAAA,MACb;AAAA,MACA;AAAA,IACF;AAEA,WAAO,KAAK,UAAU,QAAQ,MAAM,CAAC;AAAA,EACvC;AAAA,EAGQ,uBAA0C;AAChD,WAAO;AAAA,MACL,IAAI,GAAM,SAAK,KAAQ,YAAQ;AAAA,MAC/B,MAAS,SAAK;AAAA,MACd,aAAa,QAAQ;AAAA,MACrB,UAAU,KAAK,kBAAkB;AAAA,MACjC,YAAY,KAAK,sBAAsB;AAAA,IACzC;AAAA,EACF;AAAA,EAEA,MAAc,iBAAuC;AAEnD,UAAM,aAAa,QAAQ,IAAI;AAC/B,QAAI,cAAiB,cAAW,UAAU,GAAG;AAC3C,YAAM,UAAU,MAAM,KAAK,kBAAkB,UAAU;AACvD,aAAO;AAAA,QACL,WAAW;AAAA,QACX,MAAM;AAAA,QACN,SAAS,WAAW;AAAA,QACpB,YAAY;AAAA,MACd;AAAA,IACF;AAGA,UAAM,eAAe,KAAK,sBAAsB;AAChD,eAAW,eAAe,cAAc;AACtC,UAAO,cAAW,WAAW,GAAG;AAC9B,cAAM,UAAU,MAAM,KAAK,kBAAkB,WAAW;AACxD,eAAO;AAAA,UACL,WAAW;AAAA,UACX,MAAM;AAAA,UACN,SAAS,WAAW;AAAA,UACpB,YAAY;AAAA,QACd;AAAA,MACF;AAAA,IACF;AAGA,QAAI;AACF,YAAMC,aAAY,MAAM,OAAO;AAC/B,YAAM,cAAcA,WAAU,eAAe;AAC7C,UAAO,cAAW,WAAW,GAAG;AAC9B,cAAM,UAAU,MAAM,KAAK,kBAAkB,WAAW;AACxD,eAAO;AAAA,UACL,WAAW;AAAA,UACX,MAAM;AAAA,UACN,SAAS,WAAW;AAAA,UACpB,YAAY;AAAA,QACd;AAAA,MACF;AAAA,IACF,SAAS,OAAP;AAAA,IAEF;AAEA,WAAO;AAAA,MACL,WAAW;AAAA,MACX,MAAM;AAAA,MACN,SAAS;AAAA,MACT,YAAY;AAAA,IACd;AAAA,EACF;AAAA,EAEQ,wBAAkC;AACxC,UAAMC,YAAc,aAAS;AAE7B,YAAQA,WAAU;AAAA,MAChB,KAAK;AACH,eAAO;AAAA,UACL;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACF;AAAA,MACF,KAAK;AACH,eAAO;AAAA,UACL;AAAA,UACA;AAAA,QACF;AAAA,MACF,KAAK;AAAA,MACL;AACE,eAAO;AAAA,UACL;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACF;AAAA,IACJ;AAAA,EACF;AAAA,EAEA,MAAc,kBAAkB,aAA6C;AAC3E,QAAI;AACF,YAAM,SAAS,SAAS,IAAI,0BAA0B;AAAA,QACpD,UAAU;AAAA,QACV,SAAS;AAAA,QACT,OAAO,CAAC,UAAU,QAAQ,QAAQ;AAAA,MACpC,CAAC;AACD,aAAO,OAAO,KAAK;AAAA,IACrB,SAAS,OAAP;AACA,aAAO;AAAA,IACT;AAAA,EACF;AAAA,EAEQ,qBAAuC;AAC7C,UAAMA,YAAc,aAAS;AAE7B,QAAIA,cAAa,WAAWA,cAAa,UAAU;AACjD,aAAO;AAAA,QACL,QAAQ;AAAA,QACR,WAAW;AAAA,QACX,SAAS;AAAA,QACT,SAAS,EAAE,UAAAA,WAAU,YAAY,KAAK;AAAA,MACxC;AAAA,IACF;AAGA,UAAM,UAAU,QAAQ,IAAI;AAC5B,UAAM,iBAAiB,QAAQ,IAAI;AAEnC,QAAI,WAAW,gBAAgB;AAC7B,aAAO;AAAA,QACL,QAAQ;AAAA,QACR,WAAW;AAAA,QACX,SAAS,6BAA6B,UAAU,QAAQ;AAAA,QACxD,SAAS,EAAE,UAAAA,WAAU,SAAS,gBAAgB,YAAY,KAAK;AAAA,MACjE;AAAA,IACF;AAGA,QAAI;AACF,eAAS,cAAc,EAAE,OAAO,SAAS,CAAC;AAC1C,aAAO;AAAA,QACL,QAAQ;AAAA,QACR,WAAW;AAAA,QACX,SAAS;AAAA,QACT,aAAa;AAAA,QACb,SAAS,EAAE,UAAAA,WAAU,SAAS,MAAM,YAAY,MAAM;AAAA,MACxD;AAAA,IACF,SAAS,OAAP;AACA,aAAO;AAAA,QACL,QAAQ;AAAA,QACR,WAAW;AAAA,QACX,SAAS;AAAA,QACT,aAAa;AAAA,QACb,SAAS,EAAE,UAAAA,WAAU,SAAS,OAAO,YAAY,MAAM;AAAA,MACzD;AAAA,IACF;AAAA,EACF;AAAA,EAEQ,wBAA0C;AAChD,UAAMA,YAAc,aAAS;AAC7B,UAAM,QAAkB,CAAC;AACzB,QAAI,WAAqB,CAAC;AAE1B,YAAQA,WAAU;AAAA,MAChB,KAAK;AACH,mBAAW,CAAC,oBAAoB;AAChC;AAAA,MACF,KAAK;AACH,mBAAW,CAAC,yBAAyB,gBAAgB;AACrD;AAAA,MACF,KAAK;AAAA,MACL;AACE,mBAAW,CAAC,oBAAoB,0BAA0B,gBAAgB;AAC1E;AAAA,IACJ;AAEA,QAAI,aAAa;AACjB,eAAW,WAAW,UAAU;AAC9B,UAAI;AACF,YAAO,cAAW,OAAO,GAAG;AAC1B,gBAAM,YAAY,KAAK,aAAa,OAAO;AAC3C,wBAAc,UAAU;AACxB,gBAAM,KAAK,GAAG,UAAU,MAAM,GAAG,CAAC,CAAC;AAAA,QACrC;AAAA,MACF,SAAS,OAAP;AAAA,MAEF;AAAA,IACF;AAEA,QAAI,aAAa,GAAG;AAClB,aAAO;AAAA,QACL,QAAQ;AAAA,QACR,WAAW;AAAA,QACX,SAAS,SAAS;AAAA,QAClB,SAAS,EAAE,YAAY,aAAa,OAAO,UAAAA,UAAS;AAAA,MACtD;AAAA,IACF,OAAO;AACL,aAAO;AAAA,QACL,QAAQ;AAAA,QACR,WAAW;AAAA,QACX,SAAS;AAAA,QACT,aAAa;AAAA,QACb,SAAS,EAAE,YAAY,GAAG,aAAa,UAAU,UAAAA,UAAS;AAAA,MAC5D;AAAA,IACF;AAAA,EACF;AAAA,EAEQ,aAAa,KAAuB;AAC1C,QAAI;AACF,YAAM,QAAW,eAAY,GAAG;AAChC,aAAO,MAAM;AAAA,QAAO,UAClB,KAAK,YAAY,EAAE,SAAS,MAAM,KAClC,KAAK,YAAY,EAAE,SAAS,MAAM,KAClC,KAAK,YAAY,EAAE,SAAS,OAAO,KACnC,KAAK,YAAY,EAAE,SAAS,QAAQ;AAAA,MACtC;AAAA,IACF,SAAS,OAAP;AACA,aAAO,CAAC;AAAA,IACV;AAAA,EACF;AAAA,EAEQ,oBAA6B;AACnC,QAAI;AAEF,UAAO,cAAW,aAAa,GAAG;AAChC,eAAO;AAAA,MACT;AAGA,YAAM,SAAY,gBAAa,kBAAkB,MAAM;AACvD,aAAO,OAAO,SAAS,QAAQ,KAAK,OAAO,SAAS,YAAY;AAAA,IAClE,SAAS,OAAP;AACA,aAAO;AAAA,IACT;AAAA,EACF;AAAA,EAEQ,wBAAiC;AACvC,UAAMA,YAAc,aAAS;AAE7B,QAAIA,cAAa,WAAWA,cAAa,UAAU;AACjD,aAAO;AAAA,IACT;AAGA,WAAO,CAAC,QAAQ,IAAI,WAAW,CAAC,QAAQ,IAAI;AAAA,EAC9C;AAAA,EAGA,MAAc,uBAAuB,aAAqD;AACxF,QAAI;AACF,YAAMD,aAAY,MAAM,OAAO;AAE/B,YAAM,UAAU,MAAMA,WAAU,OAAO;AAAA,QACrC,gBAAgB,YAAY;AAAA,QAC5B,UAAU;AAAA,QACV,MAAM,CAAC,gBAAgB,4BAA4B,yBAAyB;AAAA,MAC9E,CAAC;AAGD,YAAM,OAAO,MAAM,QAAQ,QAAQ;AACnC,YAAM,KAAK,KAAK,gCAAgC,EAAE,WAAW,OAAO,CAAC;AACrE,YAAM,QAAQ,MAAM,KAAK,MAAM;AAE/B,YAAM,QAAQ,MAAM;AAEpB,aAAO;AAAA,QACL,QAAQ;AAAA,QACR,WAAW;AAAA,QACX,SAAS;AAAA,QACT,SAAS,EAAE,aAAa,YAAY,MAAM,WAAW,MAAM;AAAA,MAC7D;AAAA,IACF,SAAS,OAAP;AACA,aAAO;AAAA,QACL,QAAQ;AAAA,QACR,WAAW;AAAA,QACX,SAAS,gCAAgC,iBAAiB,QAAQ,MAAM,UAAU;AAAA,QAClF,aAAa;AAAA,QACb,SAAS,EAAE,aAAa,YAAY,MAAM,OAAO,iBAAiB,QAAQ,MAAM,UAAU,gBAAgB;AAAA,MAC5G;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAc,2BAA2B,aAAuD;AAC9F,UAAM,UAA8B,CAAC;AAGrC,UAAM,iBAAiB;AAAA,MACrB;AAAA,QACE,MAAM;AAAA,QACN,MAAM,CAAC,gBAAgB,0BAA0B;AAAA,MACnD;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,MAAM,CAAC,gBAAgB,4BAA4B,2BAA2B,eAAe;AAAA,MAC/F;AAAA,MACA;AAAA,QACE,MAAM;AAAA,QACN,MAAM;AAAA,UACJ;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,UACA;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAEA,eAAW,UAAU,gBAAgB;AACnC,YAAM,SAAS,MAAM,KAAK,yBAAyB,aAAa,MAAM;AACtE,cAAQ,KAAK,MAAM;AAAA,IACrB;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,MAAc,yBACZ,aACA,QAC2B;AAC3B,QAAI;AACF,YAAMA,aAAY,MAAM,OAAO;AAE/B,YAAM,UAAU,MAAMA,WAAU,OAAO;AAAA,QACrC,gBAAgB,YAAY;AAAA,QAC5B,UAAU;AAAA,QACV,MAAM,OAAO;AAAA,QACb,SAAS;AAAA,MACX,CAAC;AAED,YAAM,OAAO,MAAM,QAAQ,QAAQ;AACnC,YAAM,KAAK,KAAK,uCAAuC;AAAA,QACrD,WAAW;AAAA,QACX,SAAS;AAAA,MACX,CAAC;AAED,YAAM,QAAQ,MAAM;AAEpB,aAAO;AAAA,QACL,QAAQ;AAAA,QACR,WAAW,kBAAkB,OAAO;AAAA,QACpC,SAAS,0BAA0B,OAAO;AAAA,QAC1C,SAAS,EAAE,eAAe,OAAO,MAAM,MAAM,OAAO,KAAK;AAAA,MAC3D;AAAA,IACF,SAAS,OAAP;AACA,aAAO;AAAA,QACL,QAAQ;AAAA,QACR,WAAW,kBAAkB,OAAO;AAAA,QACpC,SAAS,0BAA0B,OAAO,iBAAiB,iBAAiB,QAAQ,MAAM,UAAU;AAAA,QACpG,SAAS;AAAA,UACP,eAAe,OAAO;AAAA,UACtB,MAAM,OAAO;AAAA,UACb,OAAO,iBAAiB,QAAQ,MAAM,UAAU;AAAA,QAClD;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EAEQ,iCAAiC,aAA4C;AACnF,QAAI,CAAC,YAAY,SAAS;AACxB,aAAO;AAAA,QACL,QAAQ;AAAA,QACR,WAAW;AAAA,QACX,SAAS;AAAA,QACT,aAAa;AAAA,MACf;AAAA,IACF;AAGA,UAAM,eAAe,YAAY,QAAQ,MAAM,qBAAqB;AACpE,QAAI,CAAC,cAAc;AACjB,aAAO;AAAA,QACL,QAAQ;AAAA,QACR,WAAW;AAAA,QACX,SAAS,2BAA2B,YAAY;AAAA,QAChD,SAAS,EAAE,SAAS,YAAY,QAAQ;AAAA,MAC1C;AAAA,IACF;AAEA,UAAM,eAAe,SAAS,aAAa,IAAI,EAAE;AAIjD,QAAI,gBAAgB,IAAI;AACtB,aAAO;AAAA,QACL,QAAQ;AAAA,QACR,WAAW;AAAA,QACX,SAAS,mBAAmB,YAAY;AAAA,QACxC,SAAS,EAAE,SAAS,YAAY,SAAS,aAAa;AAAA,MACxD;AAAA,IACF,OAAO;AACL,aAAO;AAAA,QACL,QAAQ;AAAA,QACR,WAAW;AAAA,QACX,SAAS,mBAAmB,YAAY;AAAA,QACxC,aAAa;AAAA,QACb,SAAS,EAAE,SAAS,YAAY,SAAS,cAAc,kBAAkB,GAAG;AAAA,MAC9E;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAc,wBAAwB,aAAqD;AACzF,UAAMC,YAAc,aAAS;AAC7B,UAAM,SAAS,KAAK,kBAAkB;AAGtC,QAAIA,cAAa,WAAW,QAAQ;AAClC,aAAO;AAAA,QACL,QAAQ;AAAA,QACR,WAAW;AAAA,QACX,SAAS;AAAA,QACT,aAAa;AAAA,QACb,SAAS,EAAE,UAAAA,WAAU,QAAQ,iBAAiB,KAAK;AAAA,MACrD;AAAA,IACF;AAGA,QAAI;AACF,YAAMD,aAAY,MAAM,OAAO;AAE/B,YAAM,UAAU,MAAMA,WAAU,OAAO;AAAA,QACrC,gBAAgB,YAAY;AAAA,QAC5B,UAAU;AAAA,QACV,MAAM,CAAC;AAAA,QACP,SAAS;AAAA,MACX,CAAC;AAED,YAAM,QAAQ,MAAM;AAEpB,aAAO;AAAA,QACL,QAAQ;AAAA,QACR,WAAW;AAAA,QACX,SAAS;AAAA,QACT,SAAS,EAAE,UAAAC,WAAU,QAAQ,gBAAgB,KAAK;AAAA,MACpD;AAAA,IACF,SAAS,OAAP;AAEA,UAAI;AACF,cAAMD,aAAY,MAAM,OAAO;AAE/B,cAAM,UAAU,MAAMA,WAAU,OAAO;AAAA,UACrC,gBAAgB,YAAY;AAAA,UAC5B,UAAU;AAAA,UACV,MAAM,CAAC,gBAAgB,0BAA0B;AAAA,UACjD,SAAS;AAAA,QACX,CAAC;AAED,cAAM,QAAQ,MAAM;AAEpB,eAAO;AAAA,UACL,QAAQ;AAAA,UACR,WAAW;AAAA,UACX,SAAS;AAAA,UACT,aAAa;AAAA,UACb,SAAS;AAAA,YACP,UAAAC;AAAA,YACA;AAAA,YACA,gBAAgB;AAAA,YAChB,cAAc,iBAAiB,QAAQ,MAAM,UAAU;AAAA,UACzD;AAAA,QACF;AAAA,MACF,SAAS,eAAP;AACA,eAAO;AAAA,UACL,QAAQ;AAAA,UACR,WAAW;AAAA,UACX,SAAS;AAAA,UACT,aAAa;AAAA,UACb,SAAS;AAAA,YACP,UAAAA;AAAA,YACA;AAAA,YACA,cAAc,iBAAiB,QAAQ,MAAM,UAAU;AAAA,YACvD,eAAe,yBAAyB,QAAQ,cAAc,UAAU;AAAA,UAC1E;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EAEQ,6BAA+C;AACrD,UAAMA,YAAc,aAAS;AAC7B,UAAMC,QAAU,SAAK;AAErB,UAAM,qBAAqB,CAAC,SAAS,SAAS,QAAQ;AACtD,UAAM,iBAAiB,CAAC,OAAO,OAAO;AAEtC,QAAI,CAAC,mBAAmB,SAASD,SAAQ,GAAG;AAC1C,aAAO;AAAA,QACL,QAAQ;AAAA,QACR,WAAW;AAAA,QACX,SAAS,yBAAyBA;AAAA,QAClC,aAAa;AAAA,QACb,SAAS,EAAE,UAAAA,WAAU,MAAAC,OAAM,mBAAmB;AAAA,MAChD;AAAA,IACF;AAEA,QAAI,CAAC,eAAe,SAASA,KAAI,GAAG;AAClC,aAAO;AAAA,QACL,QAAQ;AAAA,QACR,WAAW;AAAA,QACX,SAAS,gBAAgBA;AAAA,QACzB,aAAa;AAAA,QACb,SAAS,EAAE,UAAAD,WAAU,MAAAC,OAAM,eAAe;AAAA,MAC5C;AAAA,IACF;AAEA,WAAO;AAAA,MACL,QAAQ;AAAA,MACR,WAAW;AAAA,MACX,SAAS,YAAYD,aAAYC;AAAA,MACjC,SAAS,EAAE,UAAAD,WAAU,MAAAC,MAAK;AAAA,IAC5B;AAAA,EACF;AAAA,EAEQ,mBAAqC;AAC3C,UAAM,cAAwB,CAAC;AAC/B,UAAM,SAAmB,CAAC;AAG1B,QAAI;AACF,YAAM,UAAa,WAAO;AAC1B,YAAM,WAAgB,UAAK,SAAS,mBAAmB,KAAK,IAAI,CAAC;AACjE,MAAG,iBAAc,UAAU,MAAM;AACjC,MAAG,cAAW,QAAQ;AACtB,kBAAY,KAAK,kBAAkB;AAAA,IACrC,SAAS,OAAP;AACA,aAAO,KAAK,qCAAqC;AAAA,IACnD;AAGA,UAAM,SAAS,KAAK,kBAAkB;AACtC,QAAI,QAAQ;AACV,aAAO,KAAK,sCAAsC;AAAA,IACpD,OAAO;AACL,kBAAY,KAAK,eAAe;AAAA,IAClC;AAGA,QAAI;AACF,UAAI,QAAQ,UAAU,QAAQ,QAAQ;AACpC,oBAAY,KAAK,qBAAqB;AAAA,MACxC;AAAA,IACF,SAAS,OAAP;AAAA,IAEF;AAEA,QAAI,OAAO,SAAS,GAAG;AACrB,aAAO;AAAA,QACL,QAAQ;AAAA,QACR,WAAW;AAAA,QACX,SAAS,+BAA+B,OAAO,KAAK,IAAI;AAAA,QACxD,aAAa;AAAA,QACb,SAAS,EAAE,aAAa,QAAQ,OAAO;AAAA,MACzC;AAAA,IACF;AAEA,WAAO;AAAA,MACL,QAAQ;AAAA,MACR,WAAW;AAAA,MACX,SAAS;AAAA,MACT,SAAS,EAAE,aAAa,OAAO;AAAA,IACjC;AAAA,EACF;AAAA,EAEQ,4BAA8C;AACpD,UAAM,cAAiB,aAAS;AAChC,UAAM,aAAgB,YAAQ;AAC9B,UAAM,WAAc,SAAK,EAAE;AAE3B,UAAM,WAAW,eAAe,OAAO,OAAO;AAC9C,UAAM,eAAe,cAAc,OAAO,OAAO;AAEjD,UAAM,SAAmB,CAAC;AAG1B,QAAI,WAAW,GAAG;AAChB,aAAO,KAAK,0BAA0B;AAAA,IACxC;AAEA,QAAI,eAAe,KAAK;AACtB,aAAO,KAAK,gCAAgC;AAAA,IAC9C;AAGA,QAAI,WAAW,GAAG;AAChB,aAAO,KAAK,wCAAwC;AAAA,IACtD;AAEA,UAAM,SAAS,OAAO,SAAS,IAAI,SAAS;AAC5C,UAAM,UAAU,OAAO,SAAS,IAC5B,kCAAkC,OAAO,KAAK,IAAI,MAClD,8BAA8B,SAAS,QAAQ,CAAC,YAAY;AAEhE,WAAO;AAAA,MACL;AAAA,MACA,WAAW;AAAA,MACX;AAAA,MACA,aAAa,OAAO,SAAS,IAAI,mDAAmD;AAAA,MACpF,SAAS;AAAA,QACP,eAAe,WAAW,SAAS,QAAQ,CAAC,CAAC;AAAA,QAC7C,cAAc,WAAW,aAAa,QAAQ,CAAC,CAAC;AAAA,QAChD;AAAA,QACA;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EAEA,MAAc,2BAAsD;AAElE,QAAI;AAEF,YAAM,MAAM,MAAM,OAAO;AACzB,YAAM,IAAI,QAAQ,CAAC,SAAS,WAAW;AACrC,YAAI,OAAO,cAAc,CAAC,QAAQ;AAChC,cAAI;AAAK,mBAAO,GAAG;AAAA;AACd,oBAAQ,IAAI;AAAA,QACnB,CAAC;AAAA,MACH,CAAC;AAED,aAAO;AAAA,QACL,QAAQ;AAAA,QACR,WAAW;AAAA,QACX,SAAS;AAAA,QACT,SAAS,EAAE,eAAe,KAAK;AAAA,MACjC;AAAA,IACF,SAAS,OAAP;AACA,aAAO;AAAA,QACL,QAAQ;AAAA,QACR,WAAW;AAAA,QACX,SAAS;AAAA,QACT,aAAa;AAAA,QACb,SAAS;AAAA,UACP,eAAe;AAAA,UACf,OAAO,iBAAiB,QAAQ,MAAM,UAAU;AAAA,QAClD;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EAEQ,oBAA6B;AACnC,QAAI;AACF,UAAI,WAAW,QAAQ,QAAQ;AAC7B,eAAO,QAAQ,OAAO,MAAM;AAAA,MAC9B;AAEA,UAAO,aAAS,EAAE,aAAa,QAAQ;AACrC,eAAO;AAAA,MACT;AAEA,aAAO;AAAA,IACT,SAAS,OAAP;AACA,aAAO;AAAA,IACT;AAAA,EACF;AACF;;;CC13BC,eAAe,OAAO;AACrB,QAAM,OAAO,QAAQ,KAAK,MAAM,CAAC;AAGjC,MAAI,KAAK,OAAO,UAAU;AACxB,UAAM,oBAAoB,KAAK,MAAM,CAAC,CAAC;AACvC;AAAA,EACF;AAGA,MAAI,KAAK,OAAO,UAAU,KAAK,OAAO,YAAY,KAAK,OAAO,MAAM;AAClE,kBAAW;AACX;AAAA,EACF;AAGA,MAAI,KAAK,OAAO,aAAa,KAAK,OAAO,eAAe,KAAK,OAAO,MAAM;AAExE,QAAI;AACF,YAAMC,MAAK,MAAM,OAAO;AACxB,YAAMC,QAAO,MAAM,OAAO;AAC1B,YAAM,cAAcA,MAAK,KAAK,QAAQ,IAAI,GAAG,cAAc;AAC3D,YAAM,iBAAiBD,IAAG,aAAa,aAAa,MAAM;AAC1D,YAAM,cAAc,KAAK,MAAM,cAAc;AAC7C,cAAQ,IAAI,aAAa,YAAY,SAAS;AAAA,IAChD,SAAS,OAAP;AACA,cAAQ,IAAI,4BAA4B;AAAA,IAC1C;AACA;AAAA,EACF;AAGA,QAAM,MAAM,KAAK;AACjB,QAAM,aAAa,KAAK;AAGxB,MAAI,CAAC,OAAO,CAAC,YAAY;AACvB,kBAAW;AACX,YAAQ,KAAK,CAAC;AAAA,EAChB;AAGA,MAAI;AACF,UAAM,iBAAS,KAAK,YAAY,MAAM,IAAI;AAAA,EAC5C,SAAS,GAAP;AACA,YAAQ,MAAM,UAAU,CAAC;AACzB,YAAQ,KAAK,CAAC;AAAA,EAChB;AACF,GAAG;AAEH,eAAe,oBAAoB,MAAgB;AACjD,QAAM,OAAO,KAAK,SAAS,QAAQ;AACnC,QAAM,OAAO,KAAK,SAAS,QAAQ,KAAK,KAAK,SAAS,IAAI;AAE1D,MAAI,MAAM;AACR,qBAAiB;AACjB;AAAA,EACF;AAEA,MAAI;AACF,YAAQ,IAAI,2CAAoC;AAEhD,UAAM,eAAe,IAAI,oBAAoB;AAC7C,UAAM,UAAU,MAAM,aAAa,mBAAmB;AAEtD,QAAI,MAAM;AACR,YAAM,aAAa,aAAa,2BAA2B,OAAO;AAClE,cAAQ,IAAI,UAAU;AAAA,IACxB,OAAO;AACL,YAAM,SAAS,MAAM,aAAa,eAAe;AACjD,cAAQ,IAAI,MAAM;AAAA,IACpB;AAGA,UAAM,cAAc,QAAQ,KAAK,OAAK,EAAE,WAAW,MAAM;AACzD,UAAM,cAAc,QAAQ,KAAK,OAAK,EAAE,WAAW,MAAM;AAEzD,QAAI,aAAa;AACf,cAAQ,MAAM,oEAA+D;AAC7E,cAAQ,KAAK,CAAC;AAAA,IAChB,WAAW,aAAa;AACtB,cAAQ,KAAK,2FAAiF;AAC9F,cAAQ,KAAK,CAAC;AAAA,IAChB,OAAO;AACL,cAAQ,IAAI,gEAA2D;AACvE,cAAQ,KAAK,CAAC;AAAA,IAChB;AAAA,EAEF,SAAS,OAAP;AACA,YAAQ,MAAM,qCAAgC,iBAAiB,QAAQ,MAAM,UAAU,eAAe;AACtG,YAAQ,KAAK,CAAC;AAAA,EAChB;AACF;AAEA,SAAS,mBAAmB;AAC1B,UAAQ,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CA4Bb;AACD;",
  "names": ["os", "puppeteer", "platform", "arch", "fs", "path"]
}
