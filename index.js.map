{
  "version": 3,
  "sources": ["src/printeer.js", "src/index.js"],
  "sourcesContent": ["import puppeteer from 'puppeteer';\r\nimport { normalize } from 'path';\r\n\r\n// networkidle0 - consider navigation to be finished when there are no more than 0 network connections for at least 500 ms\r\n// networkidle2 - consider navigation to be finished when there are no more than 2 network connections for at least 500 ms.\r\n\r\n\r\n/**\r\n * Generate the report.\r\n * @param {string} reportName The name of the report.\r\n * @returns The promise of the report file.\r\n */\r\nexport default (url, outputFile, outputType=null) => {\r\n\r\n  return new Promise(async (resolve, reject) => {\r\n    outputFile        = normalize(outputFile);\r\n\r\n    if (!url.startsWith('http')) {\r\n      reject('URL must start with http or https');\r\n    }\r\n\r\n    const browser = await puppeteer.launch({ headless: true });\r\n    const page    = await browser.newPage();\r\n    const res     = await page.goto(url, {waitUntil: 'networkidle0'});\r\n\r\n    if (!res) {\r\n      return reject(new Error(\"Could not load the page.\"));\r\n    }\r\n\r\n    // Detect outputType\r\n    outputType = detectOutputType(outputFile, outputType);\r\n\r\n    if (res.status() !== 200) {\r\n      reject(`Error: ${res.status()}: ${res.statusText()}`);\r\n    } else {\r\n      if (outputType === 'png') {\r\n        await page.screenshot({ path: outputFile });\r\n      } else {\r\n        await page.pdf({ format: 'A4', path: outputFile });\r\n      }\r\n      resolve(outputFile);\r\n    }\r\n    return await browser.close();\r\n  })\r\n}\r\n\r\nfunction detectOutputType(fname, outputType) {\r\n  const validOutputTypes = [\"pdf\", \"png\"]\r\n\r\n  if (!outputType) {\r\n    const ext = fname.split('.').pop()\r\n    if (validOutputTypes.includes(ext)) { return ext }\r\n    return 'pdf'\r\n  }\r\n\r\n  if (!validOutputTypes.includes(outputType)) { return 'pdf' }\r\n  return outputType\r\n}", "import _printeer  from './printeer';\r\n\r\n\r\nexport const printeer = _printeer;\r\n"],
  "mappings": ";AAAA,OAAO,eAAe;AACtB,SAAS,iBAAiB;AAW1B,IAAO,mBAAQ,CAAC,KAAK,YAAY,aAAW,SAAS;AAEnD,SAAO,IAAI,QAAQ,OAAO,SAAS,WAAW;AAC5C,iBAAoB,UAAU,UAAU;AAExC,QAAI,CAAC,IAAI,WAAW,MAAM,GAAG;AAC3B,aAAO,mCAAmC;AAAA,IAC5C;AAEA,UAAM,UAAU,MAAM,UAAU,OAAO,EAAE,UAAU,KAAK,CAAC;AACzD,UAAM,OAAU,MAAM,QAAQ,QAAQ;AACtC,UAAM,MAAU,MAAM,KAAK,KAAK,KAAK,EAAC,WAAW,eAAc,CAAC;AAEhE,QAAI,CAAC,KAAK;AACR,aAAO,OAAO,IAAI,MAAM,0BAA0B,CAAC;AAAA,IACrD;AAGA,iBAAa,iBAAiB,YAAY,UAAU;AAEpD,QAAI,IAAI,OAAO,MAAM,KAAK;AACxB,aAAO,UAAU,IAAI,OAAO,MAAM,IAAI,WAAW,GAAG;AAAA,IACtD,OAAO;AACL,UAAI,eAAe,OAAO;AACxB,cAAM,KAAK,WAAW,EAAE,MAAM,WAAW,CAAC;AAAA,MAC5C,OAAO;AACL,cAAM,KAAK,IAAI,EAAE,QAAQ,MAAM,MAAM,WAAW,CAAC;AAAA,MACnD;AACA,cAAQ,UAAU;AAAA,IACpB;AACA,WAAO,MAAM,QAAQ,MAAM;AAAA,EAC7B,CAAC;AACH;AAEA,SAAS,iBAAiB,OAAO,YAAY;AAC3C,QAAM,mBAAmB,CAAC,OAAO,KAAK;AAEtC,MAAI,CAAC,YAAY;AACf,UAAM,MAAM,MAAM,MAAM,GAAG,EAAE,IAAI;AACjC,QAAI,iBAAiB,SAAS,GAAG,GAAG;AAAE,aAAO;AAAA,IAAI;AACjD,WAAO;AAAA,EACT;AAEA,MAAI,CAAC,iBAAiB,SAAS,UAAU,GAAG;AAAE,WAAO;AAAA,EAAM;AAC3D,SAAO;AACT;;;ACtDO,IAAM,WAAW;",
  "names": []
}
