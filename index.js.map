{"mappings":";;;ACAA;;IAGA,0HAA0H;AAC1H,2HAA2H;AAG3H,qIAIG,CACH,wCAsBC,GAtBc,CAAC,GAAG,EAAE,UAAU,EAAE,UAAU,GAAC,KAAK,GAAK;IAEpD,OAAO,IAAI,OAAO,CAAC,OAAO,OAAO,EAAE,MAAM,GAAK;QAC5C,UAAU,GAAU,CAAA,GAAA,wDAAS,CAAA,CAAC,UAAU,CAAC,CAAC;QAE1C,MAAM,OAAO,GAAG,MAAM,CAAA,GAAA,wDAAS,CAAA,CAAC,MAAM,CAAC;YAAE,QAAQ,EAAE,IAAI;SAAE,CAAC,AAAC;QAC3D,MAAM,IAAI,GAAM,MAAM,OAAO,CAAC;QAC9B,MAAM,GAAG,GAAO,MAAM,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE;YAAC,SAAS,EAAE,cAAc;SAAC,CAAC,AAAC;QAElE,IAAI,CAAC,GAAG,EACN,OAAO,MAAM,CAAC,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC,CAAC;QAGvD,IAAI,GAAG,CAAC,MAAM,EAAE,KAAK,GAAG,EACtB,MAAM,CAAC,CAAC,OAAO,EAAE,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,GAAG,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,CAAC;aACjD;YACL,MAAM,IAAI,CAAC,GAAG,CAAC;gBAAE,MAAM,EAAE,IAAI;gBAAE,IAAI,EAAE,UAAU;aAAE,CAAC,CAAC;YACnD,OAAO,CAAC,UAAU,CAAC,CAAC;SACrB;QACD,OAAO,MAAM,OAAO,CAAC,KAAK,EAAE,CAAC;KAC9B,CAAC,CAAA;CAEH;;;;;;ADlCD;AAGO,MAAM,yCAAQ,GAAG,CAAA,GAAA,wCAAS,CAAA,AAAC","sources":["src/index.js","src/printweb.js"],"sourcesContent":["import _printWeb  from './printweb';\r\n\r\n\r\nexport const printWeb = _printWeb;\r\n","import puppeteer from 'puppeteer';\r\nimport { normalize } from 'path';\r\n\r\n// networkidle0 - consider navigation to be finished when there are no more than 0 network connections for at least 500 ms\r\n// networkidle2 - consider navigation to be finished when there are no more than 2 network connections for at least 500 ms.\r\n\r\n\r\n/**\r\n * Generate the report.\r\n * @param {string} reportName The name of the report.\r\n * @returns The promise of the report file.\r\n */\r\nexport default (url, outputFile, outputType='pdf') => {\r\n\r\n  return new Promise(async (resolve, reject) => {\r\n    outputFile        = normalize(outputFile);\r\n\r\n    const browser = await puppeteer.launch({ headless: true });\r\n    const page    = await browser.newPage();\r\n    const res     = await page.goto(url, {waitUntil: 'networkidle2'});\r\n\r\n    if (!res) {\r\n      return reject(new Error(\"Could not load the page.\"));\r\n    }\r\n\r\n    if (res.status() !== 200) {\r\n      reject(`Error: ${res.status()}: ${res.statusText()}`);\r\n    } else {\r\n      await page.pdf({ format: 'A4', path: outputFile });\r\n      resolve(outputFile);\r\n    }\r\n    return await browser.close();\r\n  })\r\n\r\n}\r\n"],"names":[],"version":3,"file":"index.js.map"}