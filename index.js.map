{
  "version": 3,
  "sources": ["src/core/doctor.ts", "src/printeer.ts", "src/utils.ts", "src/types/errors.ts", "src/core/config-manager.ts", "src/core/cli-config-loader.ts", "src/index.ts"],
  "sourcesContent": ["// Doctor module implementation\r\n\r\nimport * as os from 'os';\r\nimport * as fs from 'fs';\r\nimport * as path from 'path';\r\nimport { execSync } from 'child_process';\r\nimport { DoctorModule, DiagnosticResult, SystemEnvironment, BrowserInfo, ResourceInfo, DependencyInfo } from '../types/diagnostics';\r\n\r\nexport class DefaultDoctorModule implements DoctorModule {\r\n  async runFullDiagnostics(): Promise<DiagnosticResult[]> {\r\n    const results: DiagnosticResult[] = [];\r\n    \r\n    // Run all diagnostic checks\r\n    const systemDeps = await this.checkSystemDependencies();\r\n    const browserValidation = await this.validateBrowserInstallation();\r\n    const envCompatibility = await this.checkEnvironmentCompatibility();\r\n    \r\n    results.push(...systemDeps);\r\n    results.push(...browserValidation);\r\n    results.push(...envCompatibility);\r\n    \r\n    return results;\r\n  }\r\n\r\n  async checkSystemDependencies(): Promise<DiagnosticResult[]> {\r\n    const results: DiagnosticResult[] = [];\r\n    \r\n    // Check system information\r\n    const systemInfo = this.getSystemEnvironment();\r\n    results.push({\r\n      status: 'pass',\r\n      component: 'system-info',\r\n      message: `System: ${systemInfo.os} ${systemInfo.arch}, Node.js ${systemInfo.nodeVersion}`,\r\n      details: systemInfo\r\n    });\r\n    \r\n    // Check browser availability\r\n    const browserInfo = await this.getBrowserInfo();\r\n    if (browserInfo.available) {\r\n      results.push({\r\n        status: 'pass',\r\n        component: 'browser-availability',\r\n        message: `Browser found at: ${browserInfo.path}`,\r\n        details: browserInfo\r\n      });\r\n    } else {\r\n      results.push({\r\n        status: 'fail',\r\n        component: 'browser-availability',\r\n        message: 'No suitable browser found',\r\n        remediation: 'Install Chrome/Chromium or set PUPPETEER_EXECUTABLE_PATH environment variable',\r\n        details: browserInfo\r\n      });\r\n    }\r\n    \r\n    // Check display server\r\n    const displayServerResult = this.checkDisplayServer();\r\n    results.push(displayServerResult);\r\n    \r\n    // Check font availability\r\n    const fontResult = this.checkFontAvailability();\r\n    results.push(fontResult);\r\n    \r\n    return results;\r\n  }\r\n\r\n  async validateBrowserInstallation(): Promise<DiagnosticResult[]> {\r\n    const results: DiagnosticResult[] = [];\r\n    \r\n    // Get browser info\r\n    const browserInfo = await this.getBrowserInfo();\r\n    \r\n    if (!browserInfo.available) {\r\n      results.push({\r\n        status: 'fail',\r\n        component: 'browser-installation',\r\n        message: 'No browser installation found',\r\n        remediation: 'Install Chrome/Chromium or set PUPPETEER_EXECUTABLE_PATH',\r\n        details: browserInfo\r\n      });\r\n      return results;\r\n    }\r\n\r\n    // Test browser launch\r\n    const launchResult = await this.testBrowserLaunch();\r\n    results.push(launchResult);\r\n\r\n    // Test browser version compatibility\r\n    const versionResult = this.checkBrowserVersionCompatibility(browserInfo);\r\n    results.push(versionResult);\r\n\r\n    // Test sandbox capabilities\r\n    const sandboxResult = await this.testSandboxCapabilities(browserInfo);\r\n    results.push(sandboxResult);\r\n\r\n    return results;\r\n  }\r\n\r\n  async testBrowserLaunch(): Promise<DiagnosticResult> {\r\n    const browserInfo = await this.getBrowserInfo();\r\n    \r\n    if (!browserInfo.available) {\r\n      return {\r\n        status: 'fail',\r\n        component: 'browser-launch',\r\n        message: 'Cannot test browser launch - no browser available',\r\n        remediation: 'Install a compatible browser first'\r\n      };\r\n    }\r\n\r\n    // Test basic browser launch\r\n    const basicLaunchResult = await this.testBasicBrowserLaunch(browserInfo);\r\n    \r\n    // Test browser launch with fallback configurations\r\n    const fallbackResults = await this.testFallbackConfigurations(browserInfo);\r\n    \r\n    // Combine basic launch result with fallback results\r\n    const allResults = [basicLaunchResult, ...fallbackResults];\r\n    const passedConfigs = allResults.filter(r => r.status === 'pass');\r\n    const failedConfigs = allResults.filter(r => r.status === 'fail');\r\n    \r\n    if (passedConfigs.length === 0) {\r\n      return {\r\n        status: 'fail',\r\n        component: 'browser-launch',\r\n        message: 'All browser launch configurations failed',\r\n        remediation: 'Check browser installation and system permissions',\r\n        details: { \r\n          basicLaunchResult,\r\n          fallbackResults,\r\n          allResults\r\n        }\r\n      };\r\n    }\r\n\r\n    return {\r\n      status: 'pass',\r\n      component: 'browser-launch',\r\n      message: `Browser launch successful (${passedConfigs.length}/${allResults.length} configurations work)`,\r\n      details: { \r\n        workingConfigurations: passedConfigs.length,\r\n        totalConfigurations: allResults.length,\r\n        basicLaunchResult,\r\n        fallbackResults,\r\n        allResults\r\n      }\r\n    };\r\n  }\r\n\r\n  async checkEnvironmentCompatibility(): Promise<DiagnosticResult[]> {\r\n    const results: DiagnosticResult[] = [];\r\n    \r\n    // Check platform compatibility\r\n    const platformResult = this.checkPlatformCompatibility();\r\n    results.push(platformResult);\r\n\r\n    // Check permissions\r\n    const permissionsResult = this.checkPermissions();\r\n    results.push(permissionsResult);\r\n\r\n    // Check resource availability\r\n    const resourceResult = this.checkResourceAvailability();\r\n    results.push(resourceResult);\r\n\r\n    // Check network connectivity (basic)\r\n    const networkResult = await this.checkNetworkConnectivity();\r\n    results.push(networkResult);\r\n\r\n    return results;\r\n  }\r\n\r\n  async generateReport(): Promise<string> {\r\n    const results = await this.runFullDiagnostics();\r\n    \r\n    const report = this.formatDiagnosticReport(results);\r\n    return report;\r\n  }\r\n\r\n  private formatDiagnosticReport(results: DiagnosticResult[]): string {\r\n    const timestamp = new Date().toISOString();\r\n    const passCount = results.filter(r => r.status === 'pass').length;\r\n    const warnCount = results.filter(r => r.status === 'warn').length;\r\n    const failCount = results.filter(r => r.status === 'fail').length;\r\n    \r\n    let report = `# Printeer System Diagnostic Report\\n\\n`;\r\n    report += `Generated: ${timestamp}\\n\\n`;\r\n    report += `## Summary\\n\\n`;\r\n    report += `- \u2705 Passed: ${passCount}\\n`;\r\n    report += `- \u26A0\uFE0F  Warnings: ${warnCount}\\n`;\r\n    report += `- \u274C Failed: ${failCount}\\n\\n`;\r\n    \r\n    if (failCount > 0) {\r\n      report += `## Critical Issues\\n\\n`;\r\n      const failedResults = results.filter(r => r.status === 'fail');\r\n      for (const result of failedResults) {\r\n        report += `### \u274C ${result.component}\\n\\n`;\r\n        report += `**Issue:** ${result.message}\\n\\n`;\r\n        if (result.remediation) {\r\n          report += `**Solution:** ${result.remediation}\\n\\n`;\r\n        }\r\n        if (result.details) {\r\n          report += `**Details:**\\n\\`\\`\\`json\\n${JSON.stringify(result.details, null, 2)}\\n\\`\\`\\`\\n\\n`;\r\n        }\r\n      }\r\n    }\r\n    \r\n    if (warnCount > 0) {\r\n      report += `## Warnings\\n\\n`;\r\n      const warnResults = results.filter(r => r.status === 'warn');\r\n      for (const result of warnResults) {\r\n        report += `### \u26A0\uFE0F ${result.component}\\n\\n`;\r\n        report += `**Issue:** ${result.message}\\n\\n`;\r\n        if (result.remediation) {\r\n          report += `**Recommendation:** ${result.remediation}\\n\\n`;\r\n        }\r\n        if (result.details) {\r\n          report += `**Details:**\\n\\`\\`\\`json\\n${JSON.stringify(result.details, null, 2)}\\n\\`\\`\\`\\n\\n`;\r\n        }\r\n      }\r\n    }\r\n    \r\n    report += `## All Checks\\n\\n`;\r\n    for (const result of results) {\r\n      const icon = result.status === 'pass' ? '\u2705' : result.status === 'warn' ? '\u26A0\uFE0F' : '\u274C';\r\n      report += `### ${icon} ${result.component}\\n\\n`;\r\n      report += `**Status:** ${result.status.toUpperCase()}\\n\\n`;\r\n      report += `**Message:** ${result.message}\\n\\n`;\r\n      if (result.remediation) {\r\n        report += `**Action:** ${result.remediation}\\n\\n`;\r\n      }\r\n    }\r\n    \r\n    return report;\r\n  }\r\n\r\n  formatDiagnosticReportJson(results: DiagnosticResult[]): string {\r\n    const timestamp = new Date().toISOString();\r\n    const summary = {\r\n      timestamp,\r\n      total: results.length,\r\n      passed: results.filter(r => r.status === 'pass').length,\r\n      warnings: results.filter(r => r.status === 'warn').length,\r\n      failed: results.filter(r => r.status === 'fail').length\r\n    };\r\n    \r\n    const report = {\r\n      summary,\r\n      results\r\n    };\r\n    \r\n    return JSON.stringify(report, null, 2);\r\n  }\r\n\r\n  // Helper methods for system dependency checking\r\n  private getSystemEnvironment(): SystemEnvironment {\r\n    return {\r\n      os: `${os.type()} ${os.release()}`,\r\n      arch: os.arch(),\r\n      nodeVersion: process.version,\r\n      isDocker: this.isRunningInDocker(),\r\n      isHeadless: this.isHeadlessEnvironment()\r\n    };\r\n  }\r\n\r\n  private async getBrowserInfo(): Promise<BrowserInfo> {\r\n    // Check for custom executable path first\r\n    const customPath = process.env.PUPPETEER_EXECUTABLE_PATH;\r\n    if (customPath && fs.existsSync(customPath)) {\r\n      const version = await this.getBrowserVersion(customPath);\r\n      return {\r\n        available: true,\r\n        path: customPath,\r\n        version: version || 'unknown',\r\n        launchable: true // Will be tested in browser validation\r\n      };\r\n    }\r\n\r\n    // Try to find system Chrome/Chromium\r\n    const browserPaths = this.getSystemBrowserPaths();\r\n    for (const browserPath of browserPaths) {\r\n      if (fs.existsSync(browserPath)) {\r\n        const version = await this.getBrowserVersion(browserPath);\r\n        return {\r\n          available: true,\r\n          path: browserPath,\r\n          version: version || 'unknown',\r\n          launchable: true // Will be tested in browser validation\r\n        };\r\n      }\r\n    }\r\n\r\n    // Check if Puppeteer's bundled Chromium is available\r\n    try {\r\n      const puppeteer = await import('puppeteer');\r\n      const browserPath = puppeteer.executablePath();\r\n      if (fs.existsSync(browserPath)) {\r\n        const version = await this.getBrowserVersion(browserPath);\r\n        return {\r\n          available: true,\r\n          path: browserPath,\r\n          version: version || 'unknown',\r\n          launchable: true\r\n        };\r\n      }\r\n    } catch (error) {\r\n      // Puppeteer not available or no bundled browser\r\n    }\r\n\r\n    return {\r\n      available: false,\r\n      path: '',\r\n      version: '',\r\n      launchable: false\r\n    };\r\n  }\r\n\r\n  private getSystemBrowserPaths(): string[] {\r\n    const platform = os.platform();\r\n    \r\n    switch (platform) {\r\n      case 'win32':\r\n        return [\r\n          'C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe',\r\n          'C:\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe',\r\n          'C:\\\\Program Files\\\\Chromium\\\\Application\\\\chrome.exe',\r\n          'C:\\\\Program Files (x86)\\\\Chromium\\\\Application\\\\chrome.exe'\r\n        ];\r\n      case 'darwin':\r\n        return [\r\n          '/Applications/Google Chrome.app/Contents/MacOS/Google Chrome',\r\n          '/Applications/Chromium.app/Contents/MacOS/Chromium'\r\n        ];\r\n      case 'linux':\r\n      default:\r\n        return [\r\n          '/usr/bin/google-chrome',\r\n          '/usr/bin/google-chrome-stable',\r\n          '/usr/bin/chromium',\r\n          '/usr/bin/chromium-browser',\r\n          '/snap/bin/chromium',\r\n          '/usr/bin/chrome'\r\n        ];\r\n    }\r\n  }\r\n\r\n  private async getBrowserVersion(browserPath: string): Promise<string | null> {\r\n    try {\r\n      const result = execSync(`\"${browserPath}\" --version`, { \r\n        encoding: 'utf8', \r\n        timeout: 5000,\r\n        stdio: ['ignore', 'pipe', 'ignore']\r\n      });\r\n      return result.trim();\r\n    } catch (error) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private checkDisplayServer(): DiagnosticResult {\r\n    const platform = os.platform();\r\n    \r\n    if (platform === 'win32' || platform === 'darwin') {\r\n      return {\r\n        status: 'pass',\r\n        component: 'display-server',\r\n        message: 'Display server available (native GUI)',\r\n        details: { platform, hasDisplay: true }\r\n      };\r\n    }\r\n\r\n    // Linux - check for display server\r\n    const display = process.env.DISPLAY;\r\n    const waylandDisplay = process.env.WAYLAND_DISPLAY;\r\n    \r\n    if (display || waylandDisplay) {\r\n      return {\r\n        status: 'pass',\r\n        component: 'display-server',\r\n        message: `Display server available (${display ? 'X11' : 'Wayland'})`,\r\n        details: { platform, display, waylandDisplay, hasDisplay: true }\r\n      };\r\n    }\r\n\r\n    // Check if Xvfb is available for headless operation\r\n    try {\r\n      execSync('which Xvfb', { stdio: 'ignore' });\r\n      return {\r\n        status: 'warn',\r\n        component: 'display-server',\r\n        message: 'No display server detected, but Xvfb is available',\r\n        remediation: 'Consider running with Xvfb for headless operation',\r\n        details: { platform, hasXvfb: true, hasDisplay: false }\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        status: 'fail',\r\n        component: 'display-server',\r\n        message: 'No display server or Xvfb found',\r\n        remediation: 'Install Xvfb for headless operation: apt-get install xvfb',\r\n        details: { platform, hasXvfb: false, hasDisplay: false }\r\n      };\r\n    }\r\n  }\r\n\r\n  private checkFontAvailability(): DiagnosticResult {\r\n    const platform = os.platform();\r\n    const fonts: string[] = [];\r\n    let fontDirs: string[] = [];\r\n\r\n    switch (platform) {\r\n      case 'win32':\r\n        fontDirs = ['C:\\\\Windows\\\\Fonts'];\r\n        break;\r\n      case 'darwin':\r\n        fontDirs = ['/System/Library/Fonts', '/Library/Fonts'];\r\n        break;\r\n      case 'linux':\r\n      default:\r\n        fontDirs = ['/usr/share/fonts', '/usr/local/share/fonts', '/home/*/.fonts'];\r\n        break;\r\n    }\r\n\r\n    let totalFonts = 0;\r\n    for (const fontDir of fontDirs) {\r\n      try {\r\n        if (fs.existsSync(fontDir)) {\r\n          const fontFiles = this.getFontFiles(fontDir);\r\n          totalFonts += fontFiles.length;\r\n          fonts.push(...fontFiles.slice(0, 5)); // Sample first 5 fonts\r\n        }\r\n      } catch (error) {\r\n        // Ignore errors accessing font directories\r\n      }\r\n    }\r\n\r\n    if (totalFonts > 0) {\r\n      return {\r\n        status: 'pass',\r\n        component: 'font-availability',\r\n        message: `Found ${totalFonts} font files`,\r\n        details: { totalFonts, sampleFonts: fonts, platform }\r\n      };\r\n    } else {\r\n      return {\r\n        status: 'warn',\r\n        component: 'font-availability',\r\n        message: 'No fonts found in standard directories',\r\n        remediation: 'Install system fonts for better rendering quality',\r\n        details: { totalFonts: 0, checkedDirs: fontDirs, platform }\r\n      };\r\n    }\r\n  }\r\n\r\n  private getFontFiles(dir: string): string[] {\r\n    try {\r\n      const files = fs.readdirSync(dir);\r\n      return files.filter(file => \r\n        file.toLowerCase().endsWith('.ttf') || \r\n        file.toLowerCase().endsWith('.otf') ||\r\n        file.toLowerCase().endsWith('.woff') ||\r\n        file.toLowerCase().endsWith('.woff2')\r\n      );\r\n    } catch (error) {\r\n      return [];\r\n    }\r\n  }\r\n\r\n  private isRunningInDocker(): boolean {\r\n    try {\r\n      // Check for .dockerenv file\r\n      if (fs.existsSync('/.dockerenv')) {\r\n        return true;\r\n      }\r\n      \r\n      // Check cgroup for docker\r\n      const cgroup = fs.readFileSync('/proc/1/cgroup', 'utf8');\r\n      return cgroup.includes('docker') || cgroup.includes('containerd');\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private isHeadlessEnvironment(): boolean {\r\n    const platform = os.platform();\r\n    \r\n    if (platform === 'win32' || platform === 'darwin') {\r\n      return false; // Assume GUI available on Windows/macOS\r\n    }\r\n    \r\n    // Linux - check for display\r\n    return !process.env.DISPLAY && !process.env.WAYLAND_DISPLAY;\r\n  }\r\n\r\n  // Helper methods for browser validation and testing\r\n  private async testBasicBrowserLaunch(browserInfo: BrowserInfo): Promise<DiagnosticResult> {\r\n    try {\r\n      const puppeteer = await import('puppeteer');\r\n      \r\n      const browser = await puppeteer.launch({\r\n        executablePath: browserInfo.path,\r\n        headless: true,\r\n        args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage']\r\n      });\r\n\r\n      // Test basic page creation\r\n      const page = await browser.newPage();\r\n      await page.goto('data:text/html,<h1>Test</h1>', { waitUntil: 'load' });\r\n      const title = await page.title();\r\n      \r\n      await browser.close();\r\n\r\n      return {\r\n        status: 'pass',\r\n        component: 'browser-basic-launch',\r\n        message: 'Basic browser launch successful',\r\n        details: { browserPath: browserInfo.path, testTitle: title }\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        status: 'fail',\r\n        component: 'browser-basic-launch',\r\n        message: `Basic browser launch failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\r\n        remediation: 'Check browser installation and system permissions',\r\n        details: { browserPath: browserInfo.path, error: error instanceof Error ? error.message : 'Unknown error' }\r\n      };\r\n    }\r\n  }\r\n\r\n  private async testFallbackConfigurations(browserInfo: BrowserInfo): Promise<DiagnosticResult[]> {\r\n    const results: DiagnosticResult[] = [];\r\n    \r\n    // Test different browser configurations\r\n    const configurations = [\r\n      {\r\n        name: 'standard',\r\n        args: ['--no-sandbox', '--disable-setuid-sandbox']\r\n      },\r\n      {\r\n        name: 'minimal',\r\n        args: ['--no-sandbox', '--disable-setuid-sandbox', '--disable-dev-shm-usage', '--disable-gpu']\r\n      },\r\n      {\r\n        name: 'container-optimized',\r\n        args: [\r\n          '--no-sandbox',\r\n          '--disable-setuid-sandbox',\r\n          '--disable-dev-shm-usage',\r\n          '--disable-gpu',\r\n          '--disable-web-security',\r\n          '--disable-features=VizDisplayCompositor'\r\n        ]\r\n      }\r\n    ];\r\n\r\n    for (const config of configurations) {\r\n      const result = await this.testBrowserConfiguration(browserInfo, config);\r\n      results.push(result);\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  private async testBrowserConfiguration(\r\n    browserInfo: BrowserInfo, \r\n    config: { name: string; args: string[] }\r\n  ): Promise<DiagnosticResult> {\r\n    try {\r\n      const puppeteer = await import('puppeteer');\r\n      \r\n      const browser = await puppeteer.launch({\r\n        executablePath: browserInfo.path,\r\n        headless: true,\r\n        args: config.args,\r\n        timeout: 10000\r\n      });\r\n\r\n      const page = await browser.newPage();\r\n      await page.goto('data:text/html,<h1>Config Test</h1>', { \r\n        waitUntil: 'load',\r\n        timeout: 5000\r\n      });\r\n      \r\n      await browser.close();\r\n\r\n      return {\r\n        status: 'pass',\r\n        component: `browser-config-${config.name}`,\r\n        message: `Browser configuration '${config.name}' works`,\r\n        details: { configuration: config.name, args: config.args }\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        status: 'fail',\r\n        component: `browser-config-${config.name}`,\r\n        message: `Browser configuration '${config.name}' failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\r\n        details: { \r\n          configuration: config.name, \r\n          args: config.args,\r\n          error: error instanceof Error ? error.message : 'Unknown error'\r\n        }\r\n      };\r\n    }\r\n  }\r\n\r\n  private checkBrowserVersionCompatibility(browserInfo: BrowserInfo): DiagnosticResult {\r\n    if (!browserInfo.version) {\r\n      return {\r\n        status: 'warn',\r\n        component: 'browser-version',\r\n        message: 'Could not determine browser version',\r\n        remediation: 'Ensure browser is properly installed and accessible'\r\n      };\r\n    }\r\n\r\n    // Extract version number from version string\r\n    const versionMatch = browserInfo.version.match(/(\\d+)\\.(\\d+)\\.(\\d+)/);\r\n    if (!versionMatch) {\r\n      return {\r\n        status: 'warn',\r\n        component: 'browser-version',\r\n        message: `Unknown version format: ${browserInfo.version}`,\r\n        details: { version: browserInfo.version }\r\n      };\r\n    }\r\n\r\n    const majorVersion = parseInt(versionMatch[1], 10);\r\n    \r\n    // Chrome/Chromium version compatibility check\r\n    // Puppeteer generally supports Chrome 70+ (released in 2018)\r\n    if (majorVersion >= 70) {\r\n      return {\r\n        status: 'pass',\r\n        component: 'browser-version',\r\n        message: `Browser version ${browserInfo.version} is compatible`,\r\n        details: { version: browserInfo.version, majorVersion }\r\n      };\r\n    } else {\r\n      return {\r\n        status: 'warn',\r\n        component: 'browser-version',\r\n        message: `Browser version ${browserInfo.version} may be too old`,\r\n        remediation: 'Consider updating to Chrome/Chromium 70 or newer',\r\n        details: { version: browserInfo.version, majorVersion, minimumSupported: 70 }\r\n      };\r\n    }\r\n  }\r\n\r\n  private async testSandboxCapabilities(browserInfo: BrowserInfo): Promise<DiagnosticResult> {\r\n    const platform = os.platform();\r\n    const isRoot = this.isCurrentUserRoot();\r\n    \r\n    // Test sandbox capabilities based on environment\r\n    if (platform === 'linux' && isRoot) {\r\n      return {\r\n        status: 'warn',\r\n        component: 'browser-sandbox',\r\n        message: 'Running as root - sandbox disabled for security',\r\n        remediation: 'Run as non-root user for better security, or use --no-sandbox flag',\r\n        details: { platform, isRoot, sandboxDisabled: true }\r\n      };\r\n    }\r\n\r\n    // Test if browser can run with sandbox enabled\r\n    try {\r\n      const puppeteer = await import('puppeteer');\r\n      \r\n      const browser = await puppeteer.launch({\r\n        executablePath: browserInfo.path,\r\n        headless: true,\r\n        args: [], // No --no-sandbox flag\r\n        timeout: 10000\r\n      });\r\n\r\n      await browser.close();\r\n\r\n      return {\r\n        status: 'pass',\r\n        component: 'browser-sandbox',\r\n        message: 'Browser sandbox is working correctly',\r\n        details: { platform, isRoot, sandboxEnabled: true }\r\n      };\r\n    } catch (error) {\r\n      // Try with sandbox disabled\r\n      try {\r\n        const puppeteer = await import('puppeteer');\r\n        \r\n        const browser = await puppeteer.launch({\r\n          executablePath: browserInfo.path,\r\n          headless: true,\r\n          args: ['--no-sandbox', '--disable-setuid-sandbox'],\r\n          timeout: 10000\r\n        });\r\n\r\n        await browser.close();\r\n\r\n        return {\r\n          status: 'warn',\r\n          component: 'browser-sandbox',\r\n          message: 'Browser requires sandbox to be disabled',\r\n          remediation: 'This is normal in Docker containers or when running as root',\r\n          details: { \r\n            platform, \r\n            isRoot, \r\n            sandboxEnabled: false,\r\n            sandboxError: error instanceof Error ? error.message : 'Unknown error'\r\n          }\r\n        };\r\n      } catch (fallbackError) {\r\n        return {\r\n          status: 'fail',\r\n          component: 'browser-sandbox',\r\n          message: 'Browser cannot launch with or without sandbox',\r\n          remediation: 'Check browser installation and system configuration',\r\n          details: { \r\n            platform, \r\n            isRoot,\r\n            sandboxError: error instanceof Error ? error.message : 'Unknown error',\r\n            fallbackError: fallbackError instanceof Error ? fallbackError.message : 'Unknown error'\r\n          }\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n  private checkPlatformCompatibility(): DiagnosticResult {\r\n    const platform = os.platform();\r\n    const arch = os.arch();\r\n    \r\n    const supportedPlatforms = ['linux', 'win32', 'darwin'];\r\n    const supportedArchs = ['x64', 'arm64'];\r\n    \r\n    if (!supportedPlatforms.includes(platform)) {\r\n      return {\r\n        status: 'fail',\r\n        component: 'platform-compatibility',\r\n        message: `Unsupported platform: ${platform}`,\r\n        remediation: 'Printeer supports Linux, Windows, and macOS',\r\n        details: { platform, arch, supportedPlatforms }\r\n      };\r\n    }\r\n    \r\n    if (!supportedArchs.includes(arch)) {\r\n      return {\r\n        status: 'warn',\r\n        component: 'platform-compatibility',\r\n        message: `Architecture ${arch} may not be fully supported`,\r\n        remediation: 'x64 and arm64 architectures are recommended',\r\n        details: { platform, arch, supportedArchs }\r\n      };\r\n    }\r\n    \r\n    return {\r\n      status: 'pass',\r\n      component: 'platform-compatibility',\r\n      message: `Platform ${platform} ${arch} is supported`,\r\n      details: { platform, arch }\r\n    };\r\n  }\r\n\r\n  private checkPermissions(): DiagnosticResult {\r\n    const permissions: string[] = [];\r\n    const issues: string[] = [];\r\n    \r\n    // Check file system permissions\r\n    try {\r\n      const tempDir = os.tmpdir();\r\n      const testFile = path.join(tempDir, 'printeer-test-' + Date.now());\r\n      fs.writeFileSync(testFile, 'test');\r\n      fs.unlinkSync(testFile);\r\n      permissions.push('filesystem-write');\r\n    } catch (error) {\r\n      issues.push('Cannot write to temporary directory');\r\n    }\r\n    \r\n    // Check if running as root (security concern)\r\n    const isRoot = this.isCurrentUserRoot();\r\n    if (isRoot) {\r\n      issues.push('Running as root user (security risk)');\r\n    } else {\r\n      permissions.push('non-root-user');\r\n    }\r\n    \r\n    // Check process permissions\r\n    try {\r\n      if (process.getuid && process.getgid) {\r\n        permissions.push('process-info-access');\r\n      }\r\n    } catch (error) {\r\n      // Not available on Windows\r\n    }\r\n    \r\n    if (issues.length > 0) {\r\n      return {\r\n        status: 'warn',\r\n        component: 'permissions',\r\n        message: `Permission issues detected: ${issues.join(', ')}`,\r\n        remediation: 'Run with appropriate user permissions',\r\n        details: { permissions, issues, isRoot }\r\n      };\r\n    }\r\n    \r\n    return {\r\n      status: 'pass',\r\n      component: 'permissions',\r\n      message: 'System permissions are adequate',\r\n      details: { permissions, isRoot }\r\n    };\r\n  }\r\n\r\n  private checkResourceAvailability(): DiagnosticResult {\r\n    const totalMemory = os.totalmem();\r\n    const freeMemory = os.freemem();\r\n    const cpuCores = os.cpus().length;\r\n    \r\n    const memoryGB = totalMemory / (1024 * 1024 * 1024);\r\n    const freeMemoryGB = freeMemory / (1024 * 1024 * 1024);\r\n    \r\n    const issues: string[] = [];\r\n    \r\n    // Check minimum memory requirements (1GB total, 512MB free)\r\n    if (memoryGB < 1) {\r\n      issues.push('Low total memory (< 1GB)');\r\n    }\r\n    \r\n    if (freeMemoryGB < 0.5) {\r\n      issues.push('Low available memory (< 512MB)');\r\n    }\r\n    \r\n    // Check CPU cores\r\n    if (cpuCores < 2) {\r\n      issues.push('Single CPU core may impact performance');\r\n    }\r\n    \r\n    const status = issues.length > 0 ? 'warn' : 'pass';\r\n    const message = issues.length > 0 \r\n      ? `Resource constraints detected: ${issues.join(', ')}`\r\n      : `System resources adequate: ${memoryGB.toFixed(1)}GB RAM, ${cpuCores} CPU cores`;\r\n    \r\n    return {\r\n      status,\r\n      component: 'resource-availability',\r\n      message,\r\n      remediation: issues.length > 0 ? 'Consider increasing available system resources' : undefined,\r\n      details: {\r\n        totalMemoryGB: parseFloat(memoryGB.toFixed(2)),\r\n        freeMemoryGB: parseFloat(freeMemoryGB.toFixed(2)),\r\n        cpuCores,\r\n        issues\r\n      }\r\n    };\r\n  }\r\n\r\n  private async checkNetworkConnectivity(): Promise<DiagnosticResult> {\r\n    // Basic network connectivity test\r\n    try {\r\n      // Test if we can resolve DNS\r\n      const dns = await import('dns');\r\n      await new Promise((resolve, reject) => {\r\n        dns.lookup('google.com', (err) => {\r\n          if (err) reject(err);\r\n          else resolve(true);\r\n        });\r\n      });\r\n      \r\n      return {\r\n        status: 'pass',\r\n        component: 'network-connectivity',\r\n        message: 'Basic network connectivity available',\r\n        details: { dnsResolution: true }\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        status: 'warn',\r\n        component: 'network-connectivity',\r\n        message: 'Network connectivity issues detected',\r\n        remediation: 'Check network configuration for web content loading',\r\n        details: { \r\n          dnsResolution: false,\r\n          error: error instanceof Error ? error.message : 'Unknown error'\r\n        }\r\n      };\r\n    }\r\n  }\r\n\r\n  private isCurrentUserRoot(): boolean {\r\n    try {\r\n      if (process && process.getuid) {\r\n        return process.getuid() === 0; // UID 0 is always root\r\n      }\r\n\r\n      if (os.userInfo().username === 'root') {\r\n        return true;\r\n      }\r\n\r\n      return false;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  }\r\n}", "import puppeteer from 'puppeteer';\r\nimport { normalize } from 'path';\r\nimport { getDefaultBrowserOptions } from './utils';\r\n\r\n\r\n// networkidle0 - consider navigation to be finished when there are no more than 0 network connections for at least 500 ms\r\n// networkidle2 - consider navigation to be finished when there are no more than 2 network connections for at least 500 ms.\r\n\r\n\r\n/**\r\n * Generate the report.\r\n * @param {string} reportName The name of the report.\r\n * @returns The promise of the report file.\r\n */\r\nexport default async (url:string, outputFile:string, outputType:string|null=null, browserOptions:any) => {\r\n\r\n  getPackageJson();\r\n\r\n  outputFile = normalize(outputFile);\r\n  if (!url.startsWith('http')) {\r\n    throw new Error('URL must start with http or https');\r\n  }\r\n\r\n  let launchOptions:any = getDefaultBrowserOptions()\r\n\r\n  if (browserOptions) {\r\n    launchOptions  = { ...launchOptions, ...browserOptions}\r\n  }\r\n\r\n  // PUPPETEER_EXECUTABLE_PATH\r\n  // Read the environment variable PUPPETEER_EXECUTABLE_PATH and use it as the path to the executable.\r\n  // If the environment variable is not set, the default executable path is used.\r\n  const exePath = process.env.PUPPETEER_EXECUTABLE_PATH;\r\n  if (exePath) {\r\n    launchOptions.executablePath = exePath;\r\n  }\r\n\r\n  let res:any = null\r\n  let page:any = null\r\n  let browser:unknown = null\r\n\r\n  try {\r\n    browser = await puppeteer.launch(launchOptions);\r\n    page    = await browser.newPage();\r\n    res     = await page.goto(url, {waitUntil: 'networkidle0'});\r\n  } catch (err) {\r\n    console.error(\"Browser Launch Error:\", err)\r\n    console.error(\"Browser Launch Options:\", launchOptions)\r\n    throw err;\r\n  }\r\n\r\n  if (!res) {\r\n    throw new Error(\"Could not load the page.\");\r\n  }\r\n\r\n  // Detect outputType\r\n  outputType = detectOutputType(outputFile, outputType);\r\n\r\n  if (res.status() !== 200) {\r\n    throw new Error(`Error: ${res.status()}: ${res.statusText()}`);\r\n  }\r\n\r\n  try {\r\n    if (outputType === 'png') {\r\n      await page.screenshot({ path: outputFile });\r\n    } else {\r\n      await page.pdf({ format: 'A4', path: outputFile });\r\n    }\r\n\r\n    // convert outputFile to absolute path\r\n    outputFile = normalize(outputFile);\r\n\r\n    return outputFile;\r\n  } finally {\r\n    await browser.close();\r\n  }\r\n}\r\n\r\nfunction getPackageJson() {\r\n  // Print process exec path\r\n  console.log(\"Process exec path\", process.execPath)\r\n\r\n}\r\n\r\n\r\nfunction detectOutputType(fname:string, outputType:string|null) {\r\n  const validOutputTypes:string[] = ['pdf', 'png']\r\n\r\n  if (!outputType) {\r\n    const ext = fname.split('.').pop()\r\n    if (!ext) { return 'pdf' }\r\n    if (validOutputTypes.includes(ext)) { return ext }\r\n    return 'pdf'\r\n  }\r\n\r\n  if (!validOutputTypes.includes(outputType)) { return 'pdf' }\r\n  return outputType\r\n}", "import * as os from 'os';\r\n\r\n// Checks if the current user is root.\r\nexport const isCurrentUserRoot = function():Boolean {\r\n  if (process && process.getuid) {\r\n    return process.getuid() === 0; // UID 0 is always root\r\n  }\r\n\r\n  if (os.userInfo().username == 'root') {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\n/**\r\n * Get the default browser options returns an object with the default options for the browser.\r\n */\r\nexport const getDefaultBrowserOptions = function():any {\r\n  const launchOptions:any = {\r\n    headless: true,\r\n    args: ['--no-sandbox', '--disable-setuid-sandbox'] // <- Handle this better, only for root users!\r\n  }\r\n\r\n  // PUPPETEER_EXECUTABLE_PATH\r\n  // Read the environment variable PUPPETEER_EXECUTABLE_PATH and use it as the path to the executable.\r\n  // If the environment variable is not set, the default executable path is used.\r\n  const exePath = process.env.PUPPETEER_EXECUTABLE_PATH;\r\n  if (exePath) {\r\n    launchOptions.executablePath = exePath;\r\n  }\r\n\r\n  return launchOptions;\r\n}\r\n", "// Error handling interfaces and types\r\n\r\nexport enum ErrorType {\r\n  CONFIGURATION = 'configuration',\r\n  BROWSER_LAUNCH = 'browser_launch',\r\n  PAGE_LOAD = 'page_load',\r\n  RENDERING = 'rendering',\r\n  RESOURCE_EXHAUSTION = 'resource_exhaustion',\r\n  NETWORK = 'network',\r\n  SECURITY = 'security',\r\n  SYSTEM = 'system'\r\n}\r\n\r\nexport interface PrinteerError extends Error {\r\n  type: ErrorType;\r\n  code: string;\r\n  details: Record<string, any>;\r\n  remediation?: string;\r\n  retryable: boolean;\r\n}\r\n\r\nexport interface ErrorHandler {\r\n  handleError(error: PrinteerError): Promise<void>;\r\n  classifyError(error: Error): ErrorType;\r\n  createError(type: ErrorType, message: string, details?: Record<string, any>): PrinteerError;\r\n  shouldRetry(error: PrinteerError): boolean;\r\n}\r\n\r\nexport interface FallbackStrategy {\r\n  canHandle(error: PrinteerError): boolean;\r\n  execute(originalOptions: any): Promise<any>;\r\n  getPriority(): number;\r\n}", "import { readFile, writeFile, access } from 'fs/promises';\r\nimport { join, resolve } from 'path';\r\nimport { homedir } from 'os';\r\nimport { CliConfigLoader } from './cli-config-loader.js';\r\nimport type {\r\n  Configuration,\r\n  Environment,\r\n  ValidationResult,\r\n  ConfigurationManager as IConfigurationManager\r\n} from '../types/configuration.js';\r\n\r\n/**\r\n * Configuration Manager - Handles loading, validation, and management of configuration\r\n * Supports multiple configuration sources with proper precedence\r\n */\r\nexport class ConfigurationManager implements IConfigurationManager {\r\n  private config: Configuration | null = null;\r\n  private configPaths: string[] = [];\r\n  private watchers: Map<string, any> = new Map();\r\n\r\n  constructor(private baseDir: string = process.cwd()) {\r\n    this.initializeConfigPaths();\r\n  }\r\n\r\n  /**\r\n   * Initialize configuration file paths in order of precedence\r\n   */\r\n  private initializeConfigPaths(): void {\r\n    this.configPaths = [\r\n      // Local project config (highest precedence)\r\n      join(this.baseDir, 'printeer.config.json'),\r\n      join(this.baseDir, '.printeer.json'),\r\n\r\n      // User home config\r\n      join(homedir(), '.printeer', 'config.json'),\r\n      join(homedir(), '.printeer.json'),\r\n\r\n      // System config (lowest precedence)\r\n      '/etc/printeer/config.json'\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Load configuration from multiple sources with proper precedence\r\n   * Order: defaults < config files < environment variables < CLI arguments\r\n   */\r\n  async load(cliArgs?: string[]): Promise<Configuration> {\r\n    const baseConfig = this.getDefaultConfiguration();\r\n    let mergedConfig = { ...baseConfig };\r\n\r\n    // Load from config files (reverse order for proper precedence)\r\n    for (const configPath of [...this.configPaths].reverse()) {\r\n      try {\r\n        await access(configPath);\r\n        const fileConfig = await this.loadConfigFile(configPath);\r\n        mergedConfig = this.mergeConfigurations(mergedConfig, fileConfig);\r\n      } catch (error) {\r\n        // Config file doesn't exist or can't be read - continue\r\n        // But re-throw JSON parsing errors\r\n        if (error instanceof Error && error.message.includes('JSON')) {\r\n          throw error;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Override with environment variables\r\n    const envConfig = this.loadEnvironmentConfig();\r\n    mergedConfig = this.mergeConfigurations(mergedConfig, envConfig);\r\n\r\n    // Override with CLI arguments (highest precedence)\r\n    const cliConfig = CliConfigLoader.parseCliArgs(cliArgs);\r\n    mergedConfig = this.mergeConfigurations(mergedConfig, cliConfig);\r\n\r\n    // Validate the final configuration\r\n    const validation = this.validateConfiguration(mergedConfig);\r\n    if (!validation.valid) {\r\n      throw new Error(`Configuration validation failed: ${validation.errors.join(', ')}`);\r\n    }\r\n\r\n    this.config = mergedConfig;\r\n    return mergedConfig;\r\n  }\r\n\r\n  /**\r\n   * Get a configuration value by key path (e.g., 'browser.timeout')\r\n   */\r\n  get<T>(key: string): T {\r\n    if (!this.config) {\r\n      throw new Error('Configuration not loaded. Call load() first.');\r\n    }\r\n\r\n    const keys = key.split('.');\r\n    let value: any = this.config;\r\n\r\n    for (const k of keys) {\r\n      if (value && typeof value === 'object' && k in value) {\r\n        value = value[k];\r\n      } else {\r\n        throw new Error(`Configuration key '${key}' not found`);\r\n      }\r\n    }\r\n\r\n    return value as T;\r\n  }\r\n\r\n  /**\r\n   * Set a configuration value by key path\r\n   */\r\n  set(key: string, value: any): void {\r\n    if (!this.config) {\r\n      throw new Error('Configuration not loaded. Call load() first.');\r\n    }\r\n\r\n    const keys = key.split('.');\r\n    const lastKey = keys.pop()!;\r\n    let target: any = this.config;\r\n\r\n    for (const k of keys) {\r\n      if (!target[k] || typeof target[k] !== 'object') {\r\n        target[k] = {};\r\n      }\r\n      target = target[k];\r\n    }\r\n\r\n    target[lastKey] = value;\r\n  }\r\n\r\n  /**\r\n   * Validate the current configuration\r\n   */\r\n  validate(): ValidationResult {\r\n    if (!this.config) {\r\n      return {\r\n        valid: false,\r\n        errors: ['Configuration not loaded'],\r\n        warnings: []\r\n      };\r\n    }\r\n\r\n    return this.validateConfiguration(this.config);\r\n  }\r\n\r\n  /**\r\n   * Reload configuration from all sources\r\n   */\r\n  async reload(cliArgs?: string[]): Promise<void> {\r\n    await this.load(cliArgs);\r\n  }\r\n\r\n  /**\r\n   * Get the current environment\r\n   */\r\n  getEnvironment(): Environment {\r\n    // Check PRINTEER_ENV first (highest priority), then NODE_ENV\r\n    const envVar = process.env.PRINTEER_ENV || process.env.NODE_ENV;\r\n    if (envVar === 'development' || envVar === 'production' || envVar === 'test') {\r\n      return envVar;\r\n    }\r\n\r\n    // Check if we're in a known development environment\r\n    if (process.env.NODE_ENV === 'dev' || process.env.NODE_ENV === 'development') {\r\n      return 'development';\r\n    }\r\n\r\n    // Check if we're in a known production environment\r\n    if (process.env.NODE_ENV === 'prod' || process.env.NODE_ENV === 'production') {\r\n      return 'production';\r\n    }\r\n\r\n    // Default based on other indicators\r\n    if (process.env.CI || process.env.DOCKER || process.env.KUBERNETES_SERVICE_HOST) {\r\n      return 'production';\r\n    }\r\n\r\n    return 'development';\r\n  }\r\n\r\n  /**\r\n   * Get default configuration with environment-specific overrides\r\n   */\r\n  private getDefaultConfiguration(): Configuration {\r\n    const environment = this.getEnvironment();\r\n    const isProduction = environment === 'production';\r\n    const isDevelopment = environment === 'development';\r\n\r\n    return {\r\n      mode: 'single-shot',\r\n      environment,\r\n      browser: {\r\n        headless: isProduction ? true : 'auto',\r\n        args: this.getDefaultBrowserArgs(environment),\r\n        timeout: 30000,\r\n        pool: {\r\n          min: isProduction ? 1 : 0,\r\n          max: isProduction ? 5 : 2,\r\n          idleTimeout: 300000 // 5 minutes\r\n        }\r\n      },\r\n      resources: {\r\n        maxMemoryMB: isProduction ? 1024 : 512,\r\n        maxCpuPercent: isProduction ? 80 : 50,\r\n        maxDiskMB: 100,\r\n        maxConcurrentRequests: isProduction ? 10 : 3\r\n      },\r\n      longRunning: {\r\n        coolingPeriodMs: 300000, // 5 minutes\r\n        healthCheckInterval: 30000, // 30 seconds\r\n        maxUptime: 86400000 // 24 hours\r\n      },\r\n      logging: {\r\n        level: isDevelopment ? 'debug' : 'info',\r\n        format: isProduction ? 'json' : 'text',\r\n        destination: 'console'\r\n      },\r\n      security: {\r\n        maxFileSize: 50 * 1024 * 1024, // 50MB\r\n        sanitizeInput: true\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get default browser arguments based on environment\r\n   */\r\n  private getDefaultBrowserArgs(environment: Environment): string[] {\r\n    const baseArgs = [\r\n      '--disable-dev-shm-usage',\r\n      '--disable-gpu',\r\n      '--disable-background-timer-throttling',\r\n      '--disable-backgrounding-occluded-windows',\r\n      '--disable-renderer-backgrounding'\r\n    ];\r\n\r\n    if (environment === 'production') {\r\n      return [\r\n        ...baseArgs,\r\n        '--no-sandbox',\r\n        '--disable-setuid-sandbox',\r\n        '--disable-extensions',\r\n        '--disable-plugins',\r\n        '--disable-images',\r\n        '--disable-javascript'\r\n      ];\r\n    }\r\n\r\n    return baseArgs;\r\n  }\r\n\r\n  /**\r\n   * Load configuration from a JSON file\r\n   */\r\n  private async loadConfigFile(filePath: string): Promise<Partial<Configuration>> {\r\n    try {\r\n      const content = await readFile(filePath, 'utf-8');\r\n      return JSON.parse(content);\r\n    } catch (error) {\r\n      throw new Error(`Failed to load config file ${filePath}: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load configuration from environment variables\r\n   */\r\n  private loadEnvironmentConfig(): Partial<Configuration> {\r\n    const config: Partial<Configuration> = {};\r\n\r\n    // Mode\r\n    if (process.env.PRINTEER_MODE) {\r\n      config.mode = process.env.PRINTEER_MODE as any;\r\n    }\r\n\r\n    // Browser configuration\r\n    if (process.env.PRINTEER_BROWSER_EXECUTABLE) {\r\n      config.browser = {\r\n        ...config.browser,\r\n        executablePath: process.env.PRINTEER_BROWSER_EXECUTABLE\r\n      };\r\n    }\r\n\r\n    if (process.env.PRINTEER_BROWSER_HEADLESS) {\r\n      const headless = process.env.PRINTEER_BROWSER_HEADLESS.toLowerCase();\r\n      config.browser = {\r\n        ...config.browser,\r\n        headless: headless === 'auto' ? 'auto' : headless === 'true'\r\n      };\r\n    }\r\n\r\n    if (process.env.PRINTEER_BROWSER_TIMEOUT) {\r\n      config.browser = {\r\n        ...config.browser,\r\n        timeout: parseInt(process.env.PRINTEER_BROWSER_TIMEOUT, 10)\r\n      };\r\n    }\r\n\r\n    // Resource limits\r\n    if (process.env.PRINTEER_MAX_MEMORY_MB) {\r\n      config.resources = {\r\n        ...config.resources,\r\n        maxMemoryMB: parseInt(process.env.PRINTEER_MAX_MEMORY_MB, 10)\r\n      };\r\n    }\r\n\r\n    if (process.env.PRINTEER_MAX_CPU_PERCENT) {\r\n      config.resources = {\r\n        ...config.resources,\r\n        maxCpuPercent: parseInt(process.env.PRINTEER_MAX_CPU_PERCENT, 10)\r\n      };\r\n    }\r\n\r\n    if (process.env.PRINTEER_MAX_CONCURRENT_REQUESTS) {\r\n      config.resources = {\r\n        ...config.resources,\r\n        maxConcurrentRequests: parseInt(process.env.PRINTEER_MAX_CONCURRENT_REQUESTS, 10)\r\n      };\r\n    }\r\n\r\n    // Logging\r\n    if (process.env.PRINTEER_LOG_LEVEL) {\r\n      config.logging = {\r\n        ...config.logging,\r\n        level: process.env.PRINTEER_LOG_LEVEL as any\r\n      };\r\n    }\r\n\r\n    if (process.env.PRINTEER_LOG_FORMAT) {\r\n      config.logging = {\r\n        ...config.logging,\r\n        format: process.env.PRINTEER_LOG_FORMAT as any\r\n      };\r\n    }\r\n\r\n    // Security\r\n    if (process.env.PRINTEER_ALLOWED_DOMAINS) {\r\n      config.security = {\r\n        ...config.security,\r\n        allowedDomains: process.env.PRINTEER_ALLOWED_DOMAINS.split(',').map(d => d.trim())\r\n      };\r\n    }\r\n\r\n    if (process.env.PRINTEER_BLOCKED_DOMAINS) {\r\n      config.security = {\r\n        ...config.security,\r\n        blockedDomains: process.env.PRINTEER_BLOCKED_DOMAINS.split(',').map(d => d.trim())\r\n      };\r\n    }\r\n\r\n    return config;\r\n  }\r\n\r\n  /**\r\n   * Deep merge two configuration objects\r\n   */\r\n  private mergeConfigurations(base: Configuration, override: Partial<Configuration>): Configuration {\r\n    const result = { ...base };\r\n\r\n    for (const [key, value] of Object.entries(override)) {\r\n      if (value !== undefined && value !== null) {\r\n        if (typeof value === 'object' && !Array.isArray(value) &&\r\n          key in result && typeof (result as any)[key] === 'object' &&\r\n          !Array.isArray((result as any)[key])) {\r\n          // Deep merge nested objects\r\n          (result as any)[key] = this.deepMerge((result as any)[key], value);\r\n        } else {\r\n          (result as any)[key] = value;\r\n        }\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Recursively merge two objects\r\n   */\r\n  private deepMerge(target: any, source: any): unknown {\r\n    const result = { ...target };\r\n\r\n    for (const [key, value] of Object.entries(source)) {\r\n      if (value !== undefined && value !== null) {\r\n        if (typeof value === 'object' && !Array.isArray(value) &&\r\n          key in result && typeof result[key] === 'object' &&\r\n          !Array.isArray(result[key])) {\r\n          result[key] = this.deepMerge(result[key], value);\r\n        } else {\r\n          result[key] = value;\r\n        }\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Comprehensive configuration validation\r\n   */\r\n  private validateConfiguration(config: Configuration): ValidationResult {\r\n    const errors: string[] = [];\r\n    const warnings: string[] = [];\r\n\r\n    // Validate mode\r\n    if (!['single-shot', 'long-running'].includes(config.mode)) {\r\n      errors.push(`Invalid mode: ${config.mode}. Must be 'single-shot' or 'long-running'`);\r\n    }\r\n\r\n    // Validate environment\r\n    if (!['development', 'production', 'test'].includes(config.environment)) {\r\n      errors.push(`Invalid environment: ${config.environment}. Must be 'development', 'production', or 'test'`);\r\n    }\r\n\r\n    // Validate browser configuration\r\n    if (config.browser) {\r\n      if (typeof config.browser.headless !== 'boolean' && config.browser.headless !== 'auto') {\r\n        errors.push('browser.headless must be boolean or \"auto\"');\r\n      }\r\n\r\n      if (config.browser.timeout <= 0) {\r\n        errors.push('browser.timeout must be positive');\r\n      }\r\n\r\n      if (config.browser.pool) {\r\n        if (config.browser.pool.min < 0) {\r\n          errors.push('browser.pool.min must be non-negative');\r\n        }\r\n        if (config.browser.pool.max <= 0) {\r\n          errors.push('browser.pool.max must be positive');\r\n        }\r\n        if (config.browser.pool.min > config.browser.pool.max) {\r\n          errors.push('browser.pool.min cannot be greater than browser.pool.max');\r\n        }\r\n        if (config.browser.pool.idleTimeout <= 0) {\r\n          errors.push('browser.pool.idleTimeout must be positive');\r\n        }\r\n      }\r\n    }\r\n\r\n    // Validate resource limits\r\n    if (config.resources) {\r\n      if (config.resources.maxMemoryMB <= 0) {\r\n        errors.push('resources.maxMemoryMB must be positive');\r\n      }\r\n      if (config.resources.maxCpuPercent <= 0 || config.resources.maxCpuPercent > 100) {\r\n        errors.push('resources.maxCpuPercent must be between 1 and 100');\r\n      }\r\n      if (config.resources.maxDiskMB <= 0) {\r\n        errors.push('resources.maxDiskMB must be positive');\r\n      }\r\n      if (config.resources.maxConcurrentRequests <= 0) {\r\n        errors.push('resources.maxConcurrentRequests must be positive');\r\n      }\r\n\r\n      // Warnings for resource limits\r\n      if (config.resources.maxMemoryMB < 256) {\r\n        warnings.push('resources.maxMemoryMB is very low (< 256MB), may cause performance issues');\r\n      }\r\n      if (config.resources.maxConcurrentRequests > 20) {\r\n        warnings.push('resources.maxConcurrentRequests is very high (> 20), may cause resource exhaustion');\r\n      }\r\n    }\r\n\r\n    // Validate long-running configuration\r\n    if (config.longRunning) {\r\n      if (config.longRunning.coolingPeriodMs <= 0) {\r\n        errors.push('longRunning.coolingPeriodMs must be positive');\r\n      }\r\n      if (config.longRunning.healthCheckInterval <= 0) {\r\n        errors.push('longRunning.healthCheckInterval must be positive');\r\n      }\r\n      if (config.longRunning.maxUptime <= 0) {\r\n        errors.push('longRunning.maxUptime must be positive');\r\n      }\r\n    }\r\n\r\n    // Validate logging configuration\r\n    if (config.logging) {\r\n      if (!['error', 'warn', 'info', 'debug'].includes(config.logging.level)) {\r\n        errors.push(`Invalid logging.level: ${config.logging.level}`);\r\n      }\r\n      if (!['json', 'text'].includes(config.logging.format)) {\r\n        errors.push(`Invalid logging.format: ${config.logging.format}`);\r\n      }\r\n      if (!['console', 'file', 'both'].includes(config.logging.destination)) {\r\n        errors.push(`Invalid logging.destination: ${config.logging.destination}`);\r\n      }\r\n    }\r\n\r\n    // Validate security configuration\r\n    if (config.security) {\r\n      if (config.security.maxFileSize <= 0) {\r\n        errors.push('security.maxFileSize must be positive');\r\n      }\r\n\r\n      // Validate domain lists\r\n      if (config.security.allowedDomains) {\r\n        for (const domain of config.security.allowedDomains) {\r\n          if (!this.isValidDomain(domain)) {\r\n            errors.push(`Invalid domain in allowedDomains: ${domain}`);\r\n          }\r\n        }\r\n      }\r\n\r\n      if (config.security.blockedDomains) {\r\n        for (const domain of config.security.blockedDomains) {\r\n          if (!this.isValidDomain(domain)) {\r\n            errors.push(`Invalid domain in blockedDomains: ${domain}`);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    return {\r\n      valid: errors.length === 0,\r\n      errors,\r\n      warnings\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Validate domain format\r\n   */\r\n  private isValidDomain(domain: string): boolean {\r\n    // Basic domain validation - can be enhanced\r\n    const domainRegex = /^[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(\\.[a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\r\n    return domainRegex.test(domain) || domain === '*' || domain.startsWith('*.');\r\n  }\r\n\r\n  /**\r\n   * Enable hot-reloading for long-running mode\r\n   */\r\n  enableHotReload(): void {\r\n    if (this.watchers.size > 0) {\r\n      return; // Already enabled\r\n    }\r\n\r\n    // Note: In a real implementation, you'd use fs.watch or chokidar\r\n    // For now, we'll implement a simple polling mechanism\r\n    const pollInterval = 5000; // 5 seconds\r\n\r\n    for (const configPath of this.configPaths) {\r\n      const intervalId = setInterval(async () => {\r\n        try {\r\n          await access(configPath);\r\n          const stats = await import('fs').then(fs => fs.promises.stat(configPath));\r\n          const lastModified = stats.mtime.getTime();\r\n\r\n          if (!this.watchers.has(`${configPath}_lastModified`) ||\r\n            this.watchers.get(`${configPath}_lastModified`) < lastModified) {\r\n            this.watchers.set(`${configPath}_lastModified`, lastModified);\r\n            await this.reload();\r\n          }\r\n        } catch (error) {\r\n          // File doesn't exist or can't be accessed\r\n        }\r\n      }, pollInterval);\r\n\r\n      this.watchers.set(configPath, intervalId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Disable hot-reloading\r\n   */\r\n  disableHotReload(): void {\r\n    for (const [path, intervalId] of this.watchers) {\r\n      if (typeof intervalId === 'number') {\r\n        clearInterval(intervalId);\r\n      }\r\n    }\r\n    this.watchers.clear();\r\n  }\r\n\r\n  /**\r\n   * Cleanup resources\r\n   */\r\n  destroy(): void {\r\n    this.disableHotReload();\r\n    this.config = null;\r\n  }\r\n}", "import type { Configuration } from '../types/configuration.js';\r\n\r\n/**\r\n * CLI Configuration Loader - Parses command line arguments into configuration overrides\r\n */\r\nexport class CliConfigLoader {\r\n  /**\r\n   * Parse CLI arguments into configuration overrides\r\n   */\r\n  static parseCliArgs(args: string[] = process.argv.slice(2)): Partial<Configuration> {\r\n    const config: Partial<Configuration> = {};\r\n    \r\n    for (let i = 0; i < args.length; i++) {\r\n      const arg = args[i];\r\n      const nextArg = args[i + 1];\r\n      \r\n      switch (arg) {\r\n        case '--mode':\r\n          if (nextArg && ['single-shot', 'long-running'].includes(nextArg)) {\r\n            config.mode = nextArg as any;\r\n            i++; // Skip next argument\r\n          }\r\n          break;\r\n          \r\n        case '--environment':\r\n        case '--env':\r\n          if (nextArg && ['development', 'production', 'test'].includes(nextArg)) {\r\n            config.environment = nextArg as any;\r\n            i++; // Skip next argument\r\n          }\r\n          break;\r\n          \r\n        case '--headless':\r\n          if (nextArg === 'auto') {\r\n            config.browser = { ...config.browser, headless: 'auto' };\r\n            i++; // Skip next argument\r\n          } else {\r\n            // Boolean flag\r\n            config.browser = { ...config.browser, headless: true };\r\n          }\r\n          break;\r\n          \r\n        case '--no-headless':\r\n          config.browser = { ...config.browser, headless: false };\r\n          break;\r\n          \r\n        case '--browser-timeout':\r\n          if (nextArg && !isNaN(parseInt(nextArg, 10))) {\r\n            config.browser = { ...config.browser, timeout: parseInt(nextArg, 10) };\r\n            i++; // Skip next argument\r\n          }\r\n          break;\r\n          \r\n        case '--browser-executable':\r\n          if (nextArg) {\r\n            config.browser = { ...config.browser, executablePath: nextArg };\r\n            i++; // Skip next argument\r\n          }\r\n          break;\r\n          \r\n        case '--max-memory':\r\n          if (nextArg && !isNaN(parseInt(nextArg, 10))) {\r\n            config.resources = { ...config.resources, maxMemoryMB: parseInt(nextArg, 10) };\r\n            i++; // Skip next argument\r\n          }\r\n          break;\r\n          \r\n        case '--max-cpu':\r\n          if (nextArg && !isNaN(parseInt(nextArg, 10))) {\r\n            config.resources = { ...config.resources, maxCpuPercent: parseInt(nextArg, 10) };\r\n            i++; // Skip next argument\r\n          }\r\n          break;\r\n          \r\n        case '--max-concurrent':\r\n          if (nextArg && !isNaN(parseInt(nextArg, 10))) {\r\n            config.resources = { ...config.resources, maxConcurrentRequests: parseInt(nextArg, 10) };\r\n            i++; // Skip next argument\r\n          }\r\n          break;\r\n          \r\n        case '--log-level':\r\n          if (nextArg && ['error', 'warn', 'info', 'debug'].includes(nextArg)) {\r\n            config.logging = { ...config.logging, level: nextArg as any };\r\n            i++; // Skip next argument\r\n          }\r\n          break;\r\n          \r\n        case '--log-format':\r\n          if (nextArg && ['json', 'text'].includes(nextArg)) {\r\n            config.logging = { ...config.logging, format: nextArg as any };\r\n            i++; // Skip next argument\r\n          }\r\n          break;\r\n          \r\n        case '--log-destination':\r\n          if (nextArg && ['console', 'file', 'both'].includes(nextArg)) {\r\n            config.logging = { ...config.logging, destination: nextArg as any };\r\n            i++; // Skip next argument\r\n          }\r\n          break;\r\n          \r\n        case '--allowed-domains':\r\n          if (nextArg) {\r\n            config.security = { \r\n              ...config.security, \r\n              allowedDomains: nextArg.split(',').map(d => d.trim()) \r\n            };\r\n            i++; // Skip next argument\r\n          }\r\n          break;\r\n          \r\n        case '--blocked-domains':\r\n          if (nextArg) {\r\n            config.security = { \r\n              ...config.security, \r\n              blockedDomains: nextArg.split(',').map(d => d.trim()) \r\n            };\r\n            i++; // Skip next argument\r\n          }\r\n          break;\r\n          \r\n        case '--cooling-period':\r\n          if (nextArg && !isNaN(parseInt(nextArg, 10))) {\r\n            config.longRunning = { ...config.longRunning, coolingPeriodMs: parseInt(nextArg, 10) };\r\n            i++; // Skip next argument\r\n          }\r\n          break;\r\n          \r\n        case '--max-uptime':\r\n          if (nextArg && !isNaN(parseInt(nextArg, 10))) {\r\n            config.longRunning = { ...config.longRunning, maxUptime: parseInt(nextArg, 10) };\r\n            i++; // Skip next argument\r\n          }\r\n          break;\r\n          \r\n        case '--pool-min':\r\n          if (nextArg && !isNaN(parseInt(nextArg, 10))) {\r\n            config.browser = { \r\n              ...config.browser, \r\n              pool: { ...config.browser?.pool, min: parseInt(nextArg, 10) } \r\n            };\r\n            i++; // Skip next argument\r\n          }\r\n          break;\r\n          \r\n        case '--pool-max':\r\n          if (nextArg && !isNaN(parseInt(nextArg, 10))) {\r\n            config.browser = { \r\n              ...config.browser, \r\n              pool: { ...config.browser?.pool, max: parseInt(nextArg, 10) } \r\n            };\r\n            i++; // Skip next argument\r\n          }\r\n          break;\r\n          \r\n        case '--verbose':\r\n        case '-v':\r\n          config.logging = { ...config.logging, level: 'debug' };\r\n          break;\r\n          \r\n        case '--quiet':\r\n        case '-q':\r\n          config.logging = { ...config.logging, level: 'error' };\r\n          break;\r\n          \r\n        case '--production':\r\n          config.environment = 'production';\r\n          break;\r\n          \r\n        case '--development':\r\n          config.environment = 'development';\r\n          break;\r\n          \r\n        case '--test':\r\n          config.environment = 'test';\r\n          break;\r\n      }\r\n    }\r\n    \r\n    return config;\r\n  }\r\n  \r\n  /**\r\n   * Get help text for CLI configuration options\r\n   */\r\n  static getHelpText(): string {\r\n    return `\r\nConfiguration Options:\r\n  --mode <mode>              Operation mode: single-shot, long-running\r\n  --environment <env>        Environment: development, production, test\r\n  --env <env>                Alias for --environment\r\n  \r\nBrowser Options:\r\n  --headless [auto]          Run browser in headless mode (default: auto)\r\n  --no-headless              Run browser in windowed mode\r\n  --browser-timeout <ms>     Browser timeout in milliseconds\r\n  --browser-executable <path> Path to browser executable\r\n  --pool-min <num>           Minimum browser pool size\r\n  --pool-max <num>           Maximum browser pool size\r\n  \r\nResource Options:\r\n  --max-memory <mb>          Maximum memory usage in MB\r\n  --max-cpu <percent>        Maximum CPU usage percentage\r\n  --max-concurrent <num>     Maximum concurrent requests\r\n  \r\nLogging Options:\r\n  --log-level <level>        Log level: error, warn, info, debug\r\n  --log-format <format>      Log format: json, text\r\n  --log-destination <dest>   Log destination: console, file, both\r\n  --verbose, -v              Enable verbose logging (debug level)\r\n  --quiet, -q                Enable quiet logging (error level only)\r\n  \r\nSecurity Options:\r\n  --allowed-domains <list>   Comma-separated list of allowed domains\r\n  --blocked-domains <list>   Comma-separated list of blocked domains\r\n  \r\nLong-Running Mode Options:\r\n  --cooling-period <ms>      Cooling period before shutdown in milliseconds\r\n  --max-uptime <ms>          Maximum uptime in milliseconds\r\n  \r\nEnvironment Shortcuts:\r\n  --production               Set environment to production\r\n  --development              Set environment to development\r\n  --test                     Set environment to test\r\n`;\r\n  }\r\n}", "// Backward compatible export\r\nimport printeer from \"./printeer\";\r\n\r\n// Enhanced exports\r\nexport * from './types';\r\nexport * from './interfaces';\r\nexport * from './core';\r\n\r\n// Enhanced library interface (will be implemented in task 8)\r\nexport { PrinteerService } from './interfaces/service';\r\n\r\n// Backward compatible default export\r\nexport default printeer;\r\n\r\n// Enhanced conversion function (will be implemented in task 8)\r\nexport async function convert(_options: any): Promise<any> {\r\n  throw new Error('Enhanced convert function not implemented yet - will be implemented in task 8');\r\n}\r\n\r\n// Doctor functionality\r\nexport async function doctor(): Promise<any[]> {\r\n  const { DefaultDoctorModule } = await import('./core/doctor');\r\n  const doctorModule = new DefaultDoctorModule();\r\n  return await doctorModule.runFullDiagnostics();\r\n}\r\n"],
  "mappings": "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",
  "names": ["os", "puppeteer", "platform", "arch", "resolve", "ErrorType", "fs", "path", "DefaultDoctorModule"]
}
